{"type":"protocol","name":"xwayland_shell_v1","copyright":{"type":"copyright","text":"Copyright Â© 2022 Joshua Ashton\n\n    Permission is hereby granted, free of charge, to any person obtaining a\n    copy of this software and associated documentation files (the \"Software\"),\n    to deal in the Software without restriction, including without limitation\n    the rights to use, copy, modify, merge, publish, distribute, sublicense,\n    and/or sell copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice (including the next\n    paragraph) shall be included in all copies or substantial portions of the\n    Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n    DEALINGS IN THE SOFTWARE."},"description":{"type":"description","text":"This protocol adds a xwayland_surface role which allows an Xwayland\n    server to associate an X11 window to a wl_surface.\n    \n    Before this protocol, this would be done via the Xwayland server\n    providing the wl_surface's resource id via the a client message with\n    the WL_SURFACE_ID atom on the X window.\n    This was problematic as a race could occur if the wl_surface\n    associated with a WL_SURFACE_ID for a window was destroyed before the\n    client message was processed by the compositor and another surface\n    (or other object) had taken its id due to recycling.\n    \n    This protocol solves the problem by moving the X11 window to wl_surface\n    association step to the Wayland side, which means that the association\n    cannot happen out-of-sync with the resource lifetime of the wl_surface.\n    \n    This protocol avoids duplicating the race on the other side by adding a\n    non-zero monotonic serial number which is entirely unique that is set on\n    both the wl_surface (via. xwayland_surface_v1's set_serial method) and\n    the X11 window (via. the `WL_SURFACE_SERIAL` client message) that can be\n    used to associate them, and synchronize the two timelines.\n\n    The key words \"must\", \"must not\", \"required\", \"shall\", \"shall not\",\n    \"should\", \"should not\", \"recommended\",  \"may\", and \"optional\" in this\n    document are to be interpreted as described in IETF RFC 2119.\n\n    Warning! The protocol described in this file is currently in the testing\n    phase. Backward compatible changes may be added together with the\n    corresponding interface version bump. Backward incompatible changes can\n    only be done by creating a new major version of the extension.","summary":"Protocol for associating X11 windows to wl_surfaces"},"interfaces":[{"type":"interface","name":"xwayland_shell_v1","version":"1","description":{"type":"description","text":"xwayland_shell_v1 is a singleton global object that\n      provides the ability to create a xwayland_surface_v1 object\n      for a given wl_surface.\n\n      This interface is intended to be bound by the Xwayland server.\n\n      A compositor must not allow clients other than Xwayland to\n      bind to this interface. A compositor should hide this global\n      from other clients' wl_registry.\n      A client the compositor does not consider to be an Xwayland\n      server attempting to bind this interface will result in\n      an implementation-defined error.\n\n      An Xwayland server that has bound this interface must not\n      set the `WL_SURFACE_ID` atom on a window.","summary":"context object for Xwayland shell"},"requests":[{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"Destroy the xwayland_shell_v1 object.\n\n        The child objects created via this interface are unaffected.","summary":"destroy the Xwayland shell object"},"args":[]},{"type":"request","name":"get_xwayland_surface","description":{"type":"description","text":"Create an xwayland_surface_v1 interface for a given wl_surface\n        object and gives it the xwayland_surface role.\n        \n        It is illegal to create an xwayland_surface_v1 for a wl_surface\n        which already has an assigned role and this will result in the\n        `role` protocol error.\n\n        See the documentation of xwayland_surface_v1 for more details\n        about what an xwayland_surface_v1 is and how it is used.","summary":"assign the xwayland_surface surface role"},"args":[{"type":"arg","name":"id","argType":"new_id","interface":"xwayland_surface_v1"},{"type":"arg","name":"surface","argType":"object","interface":"wl_surface"}]}],"events":[],"enums":[{"type":"enum","name":"error","bitfield":false,"entries":[{"type":"entry","name":"role","value":"0","summary":"given wl_surface has another role"}]}]},{"type":"interface","name":"xwayland_surface_v1","version":"1","description":{"type":"description","text":"An Xwayland surface is a surface managed by an Xwayland server.\n      It is used for associating surfaces to Xwayland windows.\n\n      The Xwayland server associated with actions in this interface is\n      determined by the Wayland client making the request.\n\n      The client must call wl_surface.commit on the corresponding wl_surface\n      for the xwayland_surface_v1 state to take effect.","summary":"interface for associating Xwayland windows to wl_surfaces"},"requests":[{"type":"request","name":"set_serial","description":{"type":"description","text":"Associates an Xwayland window to a wl_surface.\n        The association state is double-buffered and will be applied at\n        the time wl_surface.commit of the corresponding wl_surface is called.\n\n        The `serial_lo` and `serial_hi` parameters specify a non-zero\n        monotonic serial number which is entirely unique and provided by the\n        Xwayland server equal to the serial value provided by a client message\n        with a message type of the `WL_SURFACE_SERIAL` atom on the X11 window\n        for this surface to be associated to.\n\n        The serial value in the `WL_SURFACE_SERIAL` client message is specified\n        as having the lo-bits specified in `l[0]` and the hi-bits specified\n        in `l[1]`.\n\n        If the serial value provided by `serial_lo` and `serial_hi` is not\n        valid, the `invalid_serial` protocol error will be raised.\n\n        An X11 window may be associated with multiple surfaces throughout its\n        lifespan. (eg. unmapping and remapping a window).\n        \n        For each wl_surface, this state must not be committed more than once,\n        otherwise the `already_associated` protocol error will be raised.","summary":"associates a Xwayland window to a wl_surface"},"args":[{"type":"arg","name":"serial_lo","argType":"uint","summary":"The lower 32-bits of the serial number associated with the X11 window"},{"type":"arg","name":"serial_hi","argType":"uint","summary":"The upper 32-bits of the serial number associated with the X11 window"}]},{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"Destroy the xwayland_surface_v1 object.\n\n        Any already existing associations are unaffected by this action.","summary":"destroy the Xwayland surface object"},"args":[]}],"events":[],"enums":[{"type":"enum","name":"error","bitfield":false,"entries":[{"type":"entry","name":"already_associated","value":"0","summary":"given wl_surface is already associated with an X11 window"},{"type":"entry","name":"invalid_serial","value":"1","summary":"serial was not valid"}]}]}]}