{"type":"protocol","name":"input_timestamps_unstable_v1","copyright":{"type":"copyright","text":"Copyright Â© 2017 Collabora, Ltd.\n\n    Permission is hereby granted, free of charge, to any person obtaining a\n    copy of this software and associated documentation files (the \"Software\"),\n    to deal in the Software without restriction, including without limitation\n    the rights to use, copy, modify, merge, publish, distribute, sublicense,\n    and/or sell copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice (including the next\n    paragraph) shall be included in all copies or substantial portions of the\n    Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n    DEALINGS IN THE SOFTWARE."},"description":{"type":"description","text":"This protocol specifies a way for a client to request and receive\n    high-resolution timestamps for input events.\n\n    Warning! The protocol described in this file is experimental and\n    backward incompatible changes may be made. Backward compatible changes\n    may be added together with the corresponding interface version bump.\n    Backward incompatible changes are done by bumping the version number in\n    the protocol and interface names and resetting the interface version.\n    Once the protocol is to be declared stable, the 'z' prefix and the\n    version number in the protocol and interface names are removed and the\n    interface version number is reset.","summary":"High-resolution timestamps for input events"},"interfaces":[{"type":"interface","name":"zwp_input_timestamps_manager_v1","version":"1","description":{"type":"description","text":"A global interface used for requesting high-resolution timestamps\n      for input events.","summary":"context object for high-resolution input timestamps"},"requests":[{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"Informs the server that the client will no longer be using this\n        protocol object. Existing objects created by this object are not\n        affected.","summary":"destroy the input timestamps manager object"},"args":[]},{"type":"request","name":"get_keyboard_timestamps","description":{"type":"description","text":"Creates a new input timestamps object that represents a subscription\n        to high-resolution timestamp events for all wl_keyboard events that\n        carry a timestamp.\n\n        If the associated wl_keyboard object is invalidated, either through\n        client action (e.g. release) or server-side changes, the input\n        timestamps object becomes inert and the client should destroy it\n        by calling zwp_input_timestamps_v1.destroy.","summary":"subscribe to high-resolution keyboard timestamp events"},"args":[{"type":"arg","name":"id","argType":"new_id","interface":"zwp_input_timestamps_v1"},{"type":"arg","name":"keyboard","argType":"object","summary":"the wl_keyboard object for which to get timestamp events","interface":"wl_keyboard"}]},{"type":"request","name":"get_pointer_timestamps","description":{"type":"description","text":"Creates a new input timestamps object that represents a subscription\n        to high-resolution timestamp events for all wl_pointer events that\n        carry a timestamp.\n\n        If the associated wl_pointer object is invalidated, either through\n        client action (e.g. release) or server-side changes, the input\n        timestamps object becomes inert and the client should destroy it\n        by calling zwp_input_timestamps_v1.destroy.","summary":"subscribe to high-resolution pointer timestamp events"},"args":[{"type":"arg","name":"id","argType":"new_id","interface":"zwp_input_timestamps_v1"},{"type":"arg","name":"pointer","argType":"object","summary":"the wl_pointer object for which to get timestamp events","interface":"wl_pointer"}]},{"type":"request","name":"get_touch_timestamps","description":{"type":"description","text":"Creates a new input timestamps object that represents a subscription\n        to high-resolution timestamp events for all wl_touch events that\n        carry a timestamp.\n\n        If the associated wl_touch object becomes invalid, either through\n        client action (e.g. release) or server-side changes, the input\n        timestamps object becomes inert and the client should destroy it\n        by calling zwp_input_timestamps_v1.destroy.","summary":"subscribe to high-resolution touch timestamp events"},"args":[{"type":"arg","name":"id","argType":"new_id","interface":"zwp_input_timestamps_v1"},{"type":"arg","name":"touch","argType":"object","summary":"the wl_touch object for which to get timestamp events","interface":"wl_touch"}]}],"events":[],"enums":[]},{"type":"interface","name":"zwp_input_timestamps_v1","version":"1","description":{"type":"description","text":"Provides high-resolution timestamp events for a set of subscribed input\n      events. The set of subscribed input events is determined by the\n      zwp_input_timestamps_manager_v1 request used to create this object.","summary":"context object for input timestamps"},"requests":[{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"Informs the server that the client will no longer be using this\n        protocol object. After the server processes the request, no more\n        timestamp events will be emitted.","summary":"destroy the input timestamps object"},"args":[]}],"events":[{"type":"event","name":"timestamp","description":{"type":"description","text":"The timestamp event is associated with the first subsequent input event\n        carrying a timestamp which belongs to the set of input events this\n        object is subscribed to.\n\n        The timestamp provided by this event is a high-resolution version of\n        the timestamp argument of the associated input event. The provided\n        timestamp is in the same clock domain and is at least as accurate as\n        the associated input event timestamp.\n\n        The timestamp is expressed as tv_sec_hi, tv_sec_lo, tv_nsec triples,\n        each component being an unsigned 32-bit value. Whole seconds are in\n        tv_sec which is a 64-bit value combined from tv_sec_hi and tv_sec_lo,\n        and the additional fractional part in tv_nsec as nanoseconds. Hence,\n        for valid timestamps tv_nsec must be in [0, 999999999].","summary":"high-resolution timestamp event"},"args":[{"type":"arg","name":"tv_sec_hi","argType":"uint","summary":"high 32 bits of the seconds part of the timestamp"},{"type":"arg","name":"tv_sec_lo","argType":"uint","summary":"low 32 bits of the seconds part of the timestamp"},{"type":"arg","name":"tv_nsec","argType":"uint","summary":"nanoseconds part of the timestamp"}]}],"enums":[]}]}