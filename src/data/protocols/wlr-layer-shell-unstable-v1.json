{"type":"protocol","name":"wlr_layer_shell_unstable_v1","copyright":{"type":"copyright","text":"Copyright Â© 2017 Drew DeVault\n\n    Permission to use, copy, modify, distribute, and sell this\n    software and its documentation for any purpose is hereby granted\n    without fee, provided that the above copyright notice appear in\n    all copies and that both that copyright notice and this permission\n    notice appear in supporting documentation, and that the name of\n    the copyright holders not be used in advertising or publicity\n    pertaining to distribution of the software without specific,\n    written prior permission.  The copyright holders make no\n    representations about the suitability of this software for any\n    purpose.  It is provided \"as is\" without express or implied\n    warranty.\n\n    THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS\n    SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\n    FITNESS, IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY\n    SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN\n    AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,\n    ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\n    THIS SOFTWARE."},"interfaces":[{"type":"interface","name":"zwlr_layer_shell_v1","version":"5","description":{"type":"description","text":"Clients can use this interface to assign the surface_layer role to\n      wl_surfaces. Such surfaces are assigned to a \"layer\" of the output and\n      rendered with a defined z-depth respective to each other. They may also be\n      anchored to the edges and corners of a screen and specify input handling\n      semantics. This interface should be suitable for the implementation of\n      many desktop shell components, and a broad number of other applications\n      that interact with the desktop.","summary":"create surfaces that are layers of the desktop"},"requests":[{"type":"request","name":"get_layer_surface","description":{"type":"description","text":"Create a layer surface for an existing surface. This assigns the role of\n        layer_surface, or raises a protocol error if another role is already\n        assigned.\n\n        Creating a layer surface from a wl_surface which has a buffer attached\n        or committed is a client error, and any attempts by a client to attach\n        or manipulate a buffer prior to the first layer_surface.configure call\n        must also be treated as errors.\n\n        After creating a layer_surface object and setting it up, the client\n        must perform an initial commit without any buffer attached.\n        The compositor will reply with a layer_surface.configure event.\n        The client must acknowledge it and is then allowed to attach a buffer\n        to map the surface.\n\n        You may pass NULL for output to allow the compositor to decide which\n        output to use. Generally this will be the one that the user most\n        recently interacted with.\n\n        Clients can specify a namespace that defines the purpose of the layer\n        surface.","summary":"create a layer_surface from a surface"},"args":[{"type":"arg","name":"id","argType":"new_id","interface":"zwlr_layer_surface_v1"},{"type":"arg","name":"surface","argType":"object","interface":"wl_surface"},{"type":"arg","name":"output","argType":"object","interface":"wl_output","allowNull":"true"},{"type":"arg","name":"layer","argType":"uint","summary":"layer to add this surface to","enum":"layer"},{"type":"arg","name":"namespace","argType":"string","summary":"namespace for the layer surface"}]},{"type":"request","name":"destroy","requestType":"destructor","since":"3","description":{"type":"description","text":"This request indicates that the client will not use the layer_shell\n        object any more. Objects that have been created through this instance\n        are not affected.","summary":"destroy the layer_shell object"},"args":[]}],"events":[],"enums":[{"type":"enum","name":"error","bitfield":false,"entries":[{"type":"entry","name":"role","value":"0","summary":"wl_surface has another role"},{"type":"entry","name":"invalid_layer","value":"1","summary":"layer value is invalid"},{"type":"entry","name":"already_constructed","value":"2","summary":"wl_surface has a buffer attached or committed"}]},{"type":"enum","name":"layer","bitfield":false,"description":{"type":"description","text":"These values indicate which layers a surface can be rendered in. They\n        are ordered by z depth, bottom-most first. Traditional shell surfaces\n        will typically be rendered between the bottom and top layers.\n        Fullscreen shell surfaces are typically rendered at the top layer.\n        Multiple surfaces can share a single layer, and ordering within a\n        single layer is undefined.","summary":"available layers for surfaces"},"entries":[{"type":"entry","name":"background","value":"0"},{"type":"entry","name":"bottom","value":"1"},{"type":"entry","name":"top","value":"2"},{"type":"entry","name":"overlay","value":"3"}]}]},{"type":"interface","name":"zwlr_layer_surface_v1","version":"5","description":{"type":"description","text":"An interface that may be implemented by a wl_surface, for surfaces that\n      are designed to be rendered as a layer of a stacked desktop-like\n      environment.\n\n      Layer surface state (layer, size, anchor, exclusive zone,\n      margin, interactivity) is double-buffered, and will be applied at the\n      time wl_surface.commit of the corresponding wl_surface is called.\n\n      Attaching a null buffer to a layer surface unmaps it.\n\n      Unmapping a layer_surface means that the surface cannot be shown by the\n      compositor until it is explicitly mapped again. The layer_surface\n      returns to the state it had right after layer_shell.get_layer_surface.\n      The client can re-map the surface by performing a commit without any\n      buffer attached, waiting for a configure event and handling it as usual.","summary":"layer metadata interface"},"requests":[{"type":"request","name":"set_size","description":{"type":"description","text":"Sets the size of the surface in surface-local coordinates. The\n        compositor will display the surface centered with respect to its\n        anchors.\n\n        If you pass 0 for either value, the compositor will assign it and\n        inform you of the assignment in the configure event. You must set your\n        anchor to opposite edges in the dimensions you omit; not doing so is a\n        protocol error. Both values are 0 by default.\n\n        Size is double-buffered, see wl_surface.commit.","summary":"sets the size of the surface"},"args":[{"type":"arg","name":"width","argType":"uint"},{"type":"arg","name":"height","argType":"uint"}]},{"type":"request","name":"set_anchor","description":{"type":"description","text":"Requests that the compositor anchor the surface to the specified edges\n        and corners. If two orthogonal edges are specified (e.g. 'top' and\n        'left'), then the anchor point will be the intersection of the edges\n        (e.g. the top left corner of the output); otherwise the anchor point\n        will be centered on that edge, or in the center if none is specified.\n\n        Anchor is double-buffered, see wl_surface.commit.","summary":"configures the anchor point of the surface"},"args":[{"type":"arg","name":"anchor","argType":"uint","enum":"anchor"}]},{"type":"request","name":"set_exclusive_zone","description":{"type":"description","text":"Requests that the compositor avoids occluding an area with other\n        surfaces. The compositor's use of this information is\n        implementation-dependent - do not assume that this region will not\n        actually be occluded.\n\n        A positive value is only meaningful if the surface is anchored to one\n        edge or an edge and both perpendicular edges. If the surface is not\n        anchored, anchored to only two perpendicular edges (a corner), anchored\n        to only two parallel edges or anchored to all edges, a positive value\n        will be treated the same as zero.\n\n        A positive zone is the distance from the edge in surface-local\n        coordinates to consider exclusive.\n\n        Surfaces that do not wish to have an exclusive zone may instead specify\n        how they should interact with surfaces that do. If set to zero, the\n        surface indicates that it would like to be moved to avoid occluding\n        surfaces with a positive exclusive zone. If set to -1, the surface\n        indicates that it would not like to be moved to accommodate for other\n        surfaces, and the compositor should extend it all the way to the edges\n        it is anchored to.\n\n        For example, a panel might set its exclusive zone to 10, so that\n        maximized shell surfaces are not shown on top of it. A notification\n        might set its exclusive zone to 0, so that it is moved to avoid\n        occluding the panel, but shell surfaces are shown underneath it. A\n        wallpaper or lock screen might set their exclusive zone to -1, so that\n        they stretch below or over the panel.\n\n        The default value is 0.\n\n        Exclusive zone is double-buffered, see wl_surface.commit.","summary":"configures the exclusive geometry of this surface"},"args":[{"type":"arg","name":"zone","argType":"int"}]},{"type":"request","name":"set_margin","description":{"type":"description","text":"Requests that the surface be placed some distance away from the anchor\n        point on the output, in surface-local coordinates. Setting this value\n        for edges you are not anchored to has no effect.\n\n        The exclusive zone includes the margin.\n\n        Margin is double-buffered, see wl_surface.commit.","summary":"sets a margin from the anchor point"},"args":[{"type":"arg","name":"top","argType":"int"},{"type":"arg","name":"right","argType":"int"},{"type":"arg","name":"bottom","argType":"int"},{"type":"arg","name":"left","argType":"int"}]},{"type":"request","name":"set_keyboard_interactivity","description":{"type":"description","text":"Set how keyboard events are delivered to this surface. By default,\n        layer shell surfaces do not receive keyboard events; this request can\n        be used to change this.\n\n        This setting is inherited by child surfaces set by the get_popup\n        request.\n\n        Layer surfaces receive pointer, touch, and tablet events normally. If\n        you do not want to receive them, set the input region on your surface\n        to an empty region.\n\n        Keyboard interactivity is double-buffered, see wl_surface.commit.","summary":"requests keyboard events"},"args":[{"type":"arg","name":"keyboard_interactivity","argType":"uint","enum":"keyboard_interactivity"}]},{"type":"request","name":"get_popup","description":{"type":"description","text":"This assigns an xdg_popup's parent to this layer_surface.  This popup\n        should have been created via xdg_surface::get_popup with the parent set\n        to NULL, and this request must be invoked before committing the popup's\n        initial state.\n\n        See the documentation of xdg_popup for more details about what an\n        xdg_popup is and how it is used.","summary":"assign this layer_surface as an xdg_popup parent"},"args":[{"type":"arg","name":"popup","argType":"object","interface":"xdg_popup"}]},{"type":"request","name":"ack_configure","description":{"type":"description","text":"When a configure event is received, if a client commits the\n        surface in response to the configure event, then the client\n        must make an ack_configure request sometime before the commit\n        request, passing along the serial of the configure event.\n\n        If the client receives multiple configure events before it\n        can respond to one, it only has to ack the last configure event.\n\n        A client is not required to commit immediately after sending\n        an ack_configure request - it may even ack_configure several times\n        before its next surface commit.\n\n        A client may send multiple ack_configure requests before committing, but\n        only the last request sent before a commit indicates which configure\n        event the client really is responding to.","summary":"ack a configure event"},"args":[{"type":"arg","name":"serial","argType":"uint","summary":"the serial from the configure event"}]},{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"This request destroys the layer surface.","summary":"destroy the layer_surface"},"args":[]},{"type":"request","name":"set_layer","since":"2","description":{"type":"description","text":"Change the layer that the surface is rendered on.\n\n        Layer is double-buffered, see wl_surface.commit.","summary":"change the layer of the surface"},"args":[{"type":"arg","name":"layer","argType":"uint","summary":"layer to move this surface to","enum":"zwlr_layer_shell_v1.layer"}]},{"type":"request","name":"set_exclusive_edge","since":"5","description":{"type":"description","text":"Requests an edge for the exclusive zone to apply. The exclusive\n        edge will be automatically deduced from anchor points when possible,\n        but when the surface is anchored to a corner, it will be necessary\n        to set it explicitly to disambiguate, as it is not possible to deduce\n        which one of the two corner edges should be used.\n\n        The edge must be one the surface is anchored to, otherwise the\n        invalid_exclusive_edge protocol error will be raised.","summary":"set the edge the exclusive zone will be applied to"},"args":[{"type":"arg","name":"edge","argType":"uint","enum":"anchor"}]}],"events":[{"type":"event","name":"configure","description":{"type":"description","text":"The configure event asks the client to resize its surface.\n\n        Clients should arrange their surface for the new states, and then send\n        an ack_configure request with the serial sent in this configure event at\n        some point before committing the new surface.\n\n        The client is free to dismiss all but the last configure event it\n        received.\n\n        The width and height arguments specify the size of the window in\n        surface-local coordinates.\n\n        The size is a hint, in the sense that the client is free to ignore it if\n        it doesn't resize, pick a smaller size (to satisfy aspect ratio or\n        resize in steps of NxM pixels). If the client picks a smaller size and\n        is anchored to two opposite anchors (e.g. 'top' and 'bottom'), the\n        surface will be centered on this axis.\n\n        If the width or height arguments are zero, it means the client should\n        decide its own window dimension.","summary":"suggest a surface change"},"args":[{"type":"arg","name":"serial","argType":"uint"},{"type":"arg","name":"width","argType":"uint"},{"type":"arg","name":"height","argType":"uint"}]},{"type":"event","name":"closed","description":{"type":"description","text":"The closed event is sent by the compositor when the surface will no\n        longer be shown. The output may have been destroyed or the user may\n        have asked for it to be removed. Further changes to the surface will be\n        ignored. The client should destroy the resource after receiving this\n        event, and create a new surface if they so choose.","summary":"surface should be closed"},"args":[]}],"enums":[{"type":"enum","name":"keyboard_interactivity","bitfield":false,"description":{"type":"description","text":"Types of keyboard interaction possible for layer shell surfaces. The\n        rationale for this is twofold: (1) some applications are not interested\n        in keyboard events and not allowing them to be focused can improve the\n        desktop experience; (2) some applications will want to take exclusive\n        keyboard focus.","summary":"types of keyboard interaction possible for a layer shell surface"},"entries":[{"type":"entry","name":"none","value":"0","description":{"type":"description","text":"This value indicates that this surface is not interested in keyboard\n          events and the compositor should never assign it the keyboard focus.\n\n          This is the default value, set for newly created layer shell surfaces.\n\n          This is useful for e.g. desktop widgets that display information or\n          only have interaction with non-keyboard input devices.","summary":"no keyboard focus is possible"}},{"type":"entry","name":"exclusive","value":"1","description":{"type":"description","text":"Request exclusive keyboard focus if this surface is above the shell surface layer.\n\n          For the top and overlay layers, the seat will always give\n          exclusive keyboard focus to the top-most layer which has keyboard\n          interactivity set to exclusive. If this layer contains multiple\n          surfaces with keyboard interactivity set to exclusive, the compositor\n          determines the one receiving keyboard events in an implementation-\n          defined manner. In this case, no guarantee is made when this surface\n          will receive keyboard focus (if ever).\n\n          For the bottom and background layers, the compositor is allowed to use\n          normal focus semantics.\n\n          This setting is mainly intended for applications that need to ensure\n          they receive all keyboard events, such as a lock screen or a password\n          prompt.","summary":"request exclusive keyboard focus"}},{"type":"entry","name":"on_demand","value":"2","since":"4","description":{"type":"description","text":"This requests the compositor to allow this surface to be focused and\n          unfocused by the user in an implementation-defined manner. The user\n          should be able to unfocus this surface even regardless of the layer\n          it is on.\n\n          Typically, the compositor will want to use its normal mechanism to\n          manage keyboard focus between layer shell surfaces with this setting\n          and regular toplevels on the desktop layer (e.g. click to focus).\n          Nevertheless, it is possible for a compositor to require a special\n          interaction to focus or unfocus layer shell surfaces (e.g. requiring\n          a click even if focus follows the mouse normally, or providing a\n          keybinding to switch focus between layers).\n\n          This setting is mainly intended for desktop shell components (e.g.\n          panels) that allow keyboard interaction. Using this option can allow\n          implementing a desktop shell that can be fully usable without the\n          mouse.","summary":"request regular keyboard focus semantics"}}]},{"type":"enum","name":"error","bitfield":false,"entries":[{"type":"entry","name":"invalid_surface_state","value":"0","summary":"provided surface state is invalid"},{"type":"entry","name":"invalid_size","value":"1","summary":"size is invalid"},{"type":"entry","name":"invalid_anchor","value":"2","summary":"anchor bitfield is invalid"},{"type":"entry","name":"invalid_keyboard_interactivity","value":"3","summary":"keyboard interactivity is invalid"},{"type":"entry","name":"invalid_exclusive_edge","value":"4","summary":"exclusive edge is invalid given the surface anchors"}]},{"type":"enum","name":"anchor","bitfield":true,"entries":[{"type":"entry","name":"top","value":"1","summary":"the top edge of the anchor rectangle"},{"type":"entry","name":"bottom","value":"2","summary":"the bottom edge of the anchor rectangle"},{"type":"entry","name":"left","value":"4","summary":"the left edge of the anchor rectangle"},{"type":"entry","name":"right","value":"8","summary":"the right edge of the anchor rectangle"}]}]}]}