{"type":"protocol","name":"alpha_modifier_v1","copyright":{"type":"copyright","text":"Copyright Â© 2024 Xaver Hugl\n\n    Permission is hereby granted, free of charge, to any person obtaining a\n    copy of this software and associated documentation files (the \"Software\"),\n    to deal in the Software without restriction, including without limitation\n    the rights to use, copy, modify, merge, publish, distribute, sublicense,\n    and/or sell copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice (including the next\n    paragraph) shall be included in all copies or substantial portions of the\n    Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n    DEALINGS IN THE SOFTWARE."},"interfaces":[{"type":"interface","name":"wp_alpha_modifier_v1","version":"1","description":{"type":"description","text":"This interface allows a client to set a factor for the alpha values on a\n      surface, which can be used to offload such operations to the compositor,\n      which can in turn for example offload them to KMS.\n\n      Warning! The protocol described in this file is currently in the testing\n      phase. Backward compatible changes may be added together with the\n      corresponding interface version bump. Backward incompatible changes can\n      only be done by creating a new major version of the extension.","summary":"surface alpha modifier manager"},"requests":[{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"Destroy the alpha modifier manager. This doesn't destroy objects\n        created with the manager.","summary":"destroy the alpha modifier manager object"},"args":[]},{"type":"request","name":"get_surface","description":{"type":"description","text":"Create a new alpha modifier surface object associated with the\n        given wl_surface. If there is already such an object associated with\n        the wl_surface, the already_constructed error will be raised.","summary":"create a new toplevel decoration object"},"args":[{"type":"arg","name":"id","argType":"new_id","interface":"wp_alpha_modifier_surface_v1"},{"type":"arg","name":"surface","argType":"object","interface":"wl_surface"}]}],"events":[],"enums":[{"type":"enum","name":"error","bitfield":false,"entries":[{"type":"entry","name":"already_constructed","value":"0","summary":"wl_surface already has a alpha modifier object"}]}]},{"type":"interface","name":"wp_alpha_modifier_surface_v1","version":"1","description":{"type":"description","text":"This interface allows the client to set a factor for the alpha values on\n      a surface, which can be used to offload such operations to the compositor.\n      The default factor is UINT32_MAX.\n\n      This object has to be destroyed before the associated wl_surface. Once the\n      wl_surface is destroyed, all request on this object will raise the\n      no_surface error.","summary":"alpha modifier object for a surface"},"requests":[{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"This destroys the object, and is equivalent to set_multiplier with\n        a value of UINT32_MAX, with the same double-buffered semantics as\n        set_multiplier.","summary":"destroy the alpha modifier object"},"args":[]},{"type":"request","name":"set_multiplier","description":{"type":"description","text":"Sets the alpha multiplier for the surface. The alpha multiplier is\n        double-buffered state, see wl_surface.commit for details.\n\n        This factor is applied in the compositor's blending space, as an\n        additional step after the processing of per-pixel alpha values for the\n        wl_surface. The exact meaning of the factor is thus undefined, unless\n        the blending space is specified in a different extension.\n\n        This multiplier is applied even if the buffer attached to the\n        wl_surface doesn't have an alpha channel; in that case an alpha value\n        of one is used instead.\n\n        Zero means completely transparent, UINT32_MAX means completely opaque.","summary":"specify the alpha multiplier"},"args":[{"type":"arg","name":"factor","argType":"uint"}]}],"events":[],"enums":[{"type":"enum","name":"error","bitfield":false,"entries":[{"type":"entry","name":"no_surface","value":"0","summary":"wl_surface was destroyed"}]}]}]}