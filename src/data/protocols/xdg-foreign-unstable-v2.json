{"type":"protocol","name":"xdg_foreign_unstable_v2","copyright":{"type":"copyright","text":"Copyright Â© 2015-2016 Red Hat Inc.\n\n    Permission is hereby granted, free of charge, to any person obtaining a\n    copy of this software and associated documentation files (the \"Software\"),\n    to deal in the Software without restriction, including without limitation\n    the rights to use, copy, modify, merge, publish, distribute, sublicense,\n    and/or sell copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice (including the next\n    paragraph) shall be included in all copies or substantial portions of the\n    Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n    DEALINGS IN THE SOFTWARE."},"description":{"type":"description","text":"This protocol specifies a way for making it possible to reference a surface\n    of a different client. With such a reference, a client can, by using the\n    interfaces provided by this protocol, manipulate the relationship between\n    its own surfaces and the surface of some other client. For example, stack\n    some of its own surface above the other clients surface.\n\n    In order for a client A to get a reference of a surface of client B, client\n    B must first export its surface using xdg_exporter.export_toplevel. Upon\n    doing this, client B will receive a handle (a unique string) that it may\n    share with client A in some way (for example D-Bus). After client A has\n    received the handle from client B, it may use xdg_importer.import_toplevel\n    to create a reference to the surface client B just exported. See the\n    corresponding requests for details.\n\n    A possible use case for this is out-of-process dialogs. For example when a\n    sandboxed client without file system access needs the user to select a file\n    on the file system, given sandbox environment support, it can export its\n    surface, passing the exported surface handle to an unsandboxed process that\n    can show a file browser dialog and stack it above the sandboxed client's\n    surface.\n\n    Warning! The protocol described in this file is experimental and backward\n    incompatible changes may be made. Backward compatible changes may be added\n    together with the corresponding interface version bump. Backward\n    incompatible changes are done by bumping the version number in the protocol\n    and interface names and resetting the interface version. Once the protocol\n    is to be declared stable, the 'z' prefix and the version number in the\n    protocol and interface names are removed and the interface version number is\n    reset.","summary":"Protocol for exporting xdg surface handles"},"interfaces":[{"type":"interface","name":"zxdg_exporter_v2","version":"1","description":{"type":"description","text":"A global interface used for exporting surfaces that can later be imported\n      using xdg_importer.","summary":"interface for exporting surfaces"},"requests":[{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"Notify the compositor that the xdg_exporter object will no longer be\n\tused.","summary":"destroy the xdg_exporter object"},"args":[]},{"type":"request","name":"export_toplevel","description":{"type":"description","text":"The export_toplevel request exports the passed surface so that it can later be\n\timported via xdg_importer. When called, a new xdg_exported object will\n\tbe created and xdg_exported.handle will be sent immediately. See the\n\tcorresponding interface and event for details.\n\n\tA surface may be exported multiple times, and each exported handle may\n\tbe used to create an xdg_imported multiple times. Only xdg_toplevel\n        equivalent surfaces may be exported, otherwise an invalid_surface\n        protocol error is sent.","summary":"export a toplevel surface"},"args":[{"type":"arg","name":"id","argType":"new_id","summary":"the new xdg_exported object","interface":"zxdg_exported_v2"},{"type":"arg","name":"surface","argType":"object","summary":"the surface to export","interface":"wl_surface"}]}],"events":[],"enums":[{"type":"enum","name":"error","bitfield":false,"description":{"type":"description","text":"These errors can be emitted in response to invalid xdg_exporter\n        requests.","summary":"error values"},"entries":[{"type":"entry","name":"invalid_surface","value":"0","summary":"surface is not an xdg_toplevel"}]}]},{"type":"interface","name":"zxdg_importer_v2","version":"1","description":{"type":"description","text":"A global interface used for importing surfaces exported by xdg_exporter.\n      With this interface, a client can create a reference to a surface of\n      another client.","summary":"interface for importing surfaces"},"requests":[{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"Notify the compositor that the xdg_importer object will no longer be\n\tused.","summary":"destroy the xdg_importer object"},"args":[]},{"type":"request","name":"import_toplevel","description":{"type":"description","text":"The import_toplevel request imports a surface from any client given a handle\n\tretrieved by exporting said surface using xdg_exporter.export_toplevel.\n\tWhen called, a new xdg_imported object will be created. This new object\n\trepresents the imported surface, and the importing client can\n\tmanipulate its relationship using it. See xdg_imported for details.","summary":"import a toplevel surface"},"args":[{"type":"arg","name":"id","argType":"new_id","summary":"the new xdg_imported object","interface":"zxdg_imported_v2"},{"type":"arg","name":"handle","argType":"string","summary":"the exported surface handle"}]}],"events":[],"enums":[]},{"type":"interface","name":"zxdg_exported_v2","version":"1","description":{"type":"description","text":"An xdg_exported object represents an exported reference to a surface. The\n      exported surface may be referenced as long as the xdg_exported object not\n      destroyed. Destroying the xdg_exported invalidates any relationship the\n      importer may have established using xdg_imported.","summary":"an exported surface handle"},"requests":[{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"Revoke the previously exported surface. This invalidates any\n\trelationship the importer may have set up using the xdg_imported created\n\tgiven the handle sent via xdg_exported.handle.","summary":"unexport the exported surface"},"args":[]}],"events":[{"type":"event","name":"handle","description":{"type":"description","text":"The handle event contains the unique handle of this exported surface\n\treference. It may be shared with any client, which then can use it to\n\timport the surface by calling xdg_importer.import_toplevel. A handle\n\tmay be used to import the surface multiple times.","summary":"the exported surface handle"},"args":[{"type":"arg","name":"handle","argType":"string","summary":"the exported surface handle"}]}],"enums":[]},{"type":"interface","name":"zxdg_imported_v2","version":"1","description":{"type":"description","text":"An xdg_imported object represents an imported reference to surface exported\n      by some client. A client can use this interface to manipulate\n      relationships between its own surfaces and the imported surface.","summary":"an imported surface handle"},"requests":[{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"Notify the compositor that it will no longer use the xdg_imported\n\tobject. Any relationship that may have been set up will at this point\n\tbe invalidated.","summary":"destroy the xdg_imported object"},"args":[]},{"type":"request","name":"set_parent_of","description":{"type":"description","text":"Set the imported surface as the parent of some surface of the client.\n        The passed surface must be an xdg_toplevel equivalent, otherwise an\n        invalid_surface protocol error is sent. Calling this function sets up\n        a surface to surface relation with the same stacking and positioning\n        semantics as xdg_toplevel.set_parent.","summary":"set as the parent of some surface"},"args":[{"type":"arg","name":"surface","argType":"object","summary":"the child surface","interface":"wl_surface"}]}],"events":[{"type":"event","name":"destroyed","description":{"type":"description","text":"The imported surface handle has been destroyed and any relationship set\n\tup has been invalidated. This may happen for various reasons, for\n\texample if the exported surface or the exported surface handle has been\n\tdestroyed, if the handle used for importing was invalid.","summary":"the imported surface handle has been destroyed"},"args":[]}],"enums":[{"type":"enum","name":"error","bitfield":false,"description":{"type":"description","text":"These errors can be emitted in response to invalid xdg_imported\n        requests.","summary":"error values"},"entries":[{"type":"entry","name":"invalid_surface","value":"0","summary":"surface is not an xdg_toplevel"}]}]}]}