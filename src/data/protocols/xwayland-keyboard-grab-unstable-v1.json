{"type":"protocol","name":"xwayland_keyboard_grab_unstable_v1","copyright":{"type":"copyright","text":"Copyright Â© 2017 Red Hat Inc.\n\n    Permission is hereby granted, free of charge, to any person obtaining a\n    copy of this software and associated documentation files (the \"Software\"),\n    to deal in the Software without restriction, including without limitation\n    the rights to use, copy, modify, merge, publish, distribute, sublicense,\n    and/or sell copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice (including the next\n    paragraph) shall be included in all copies or substantial portions of the\n    Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n    DEALINGS IN THE SOFTWARE."},"description":{"type":"description","text":"This protocol is application-specific to meet the needs of the X11\n    protocol through Xwayland. It provides a way for Xwayland to request\n    all keyboard events to be forwarded to a surface even when the\n    surface does not have keyboard focus.\n\n    In the X11 protocol, a client may request an \"active grab\" on the\n    keyboard. On success, all key events are reported only to the\n    grabbing X11 client. For details, see XGrabKeyboard(3).\n\n    The core Wayland protocol does not have a notion of an active\n    keyboard grab. When running in Xwayland, X11 applications may\n    acquire an active grab inside Xwayland but that cannot be translated\n    to the Wayland compositor who may set the input focus to some other\n    surface. In doing so, it breaks the X11 client assumption that all\n    key events are reported to the grabbing client.\n\n    This protocol specifies a way for Xwayland to request all keyboard\n    be directed to the given surface. The protocol does not guarantee\n    that the compositor will honor this request and it does not\n    prescribe user interfaces on how to handle the respond. For example,\n    a compositor may inform the user that all key events are now\n    forwarded to the given client surface, or it may ask the user for\n    permission to do so.\n\n    Compositors are required to restrict access to this application\n    specific protocol to Xwayland alone.\n\n    Warning! The protocol described in this file is experimental and\n    backward incompatible changes may be made. Backward compatible\n    changes may be added together with the corresponding interface\n    version bump.\n    Backward incompatible changes are done by bumping the version\n    number in the protocol and interface names and resetting the\n    interface version. Once the protocol is to be declared stable,\n    the 'z' prefix and the version number in the protocol and\n    interface names are removed and the interface version number is\n    reset.","summary":"Protocol for grabbing the keyboard from Xwayland"},"interfaces":[{"type":"interface","name":"zwp_xwayland_keyboard_grab_manager_v1","version":"1","description":{"type":"description","text":"A global interface used for grabbing the keyboard.","summary":"context object for keyboard grab manager"},"requests":[{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"Destroy the keyboard grab manager.","summary":"destroy the keyboard grab manager"},"args":[]},{"type":"request","name":"grab_keyboard","description":{"type":"description","text":"The grab_keyboard request asks for a grab of the keyboard, forcing\n\tthe keyboard focus for the given seat upon the given surface.\n\n\tThe protocol provides no guarantee that the grab is ever satisfied,\n\tand does not require the compositor to send an error if the grab\n\tcannot ever be satisfied. It is thus possible to request a keyboard\n\tgrab that will never be effective.\n\n\tThe protocol:\n\n\t* does not guarantee that the grab itself is applied for a surface,\n\t  the grab request may be silently ignored by the compositor,\n\t* does not guarantee that any events are sent to this client even\n\t  if the grab is applied to a surface,\n\t* does not guarantee that events sent to this client are exhaustive,\n\t  a compositor may filter some events for its own consumption,\n\t* does not guarantee that events sent to this client are continuous,\n\t  a compositor may change and reroute keyboard events while the grab\n\t  is nominally active.","summary":"grab the keyboard to a surface"},"args":[{"type":"arg","name":"id","argType":"new_id","interface":"zwp_xwayland_keyboard_grab_v1"},{"type":"arg","name":"surface","argType":"object","summary":"surface to report keyboard events to","interface":"wl_surface"},{"type":"arg","name":"seat","argType":"object","summary":"the seat for which the keyboard should be grabbed","interface":"wl_seat"}]}],"events":[],"enums":[]},{"type":"interface","name":"zwp_xwayland_keyboard_grab_v1","version":"1","description":{"type":"description","text":"A global interface used for grabbing the keyboard.","summary":"interface for grabbing the keyboard"},"requests":[{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"Destroy the grabbed keyboard object. If applicable, the compositor\n\twill ungrab the keyboard.","summary":"destroy the grabbed keyboard object"},"args":[]}],"events":[],"enums":[]}]}