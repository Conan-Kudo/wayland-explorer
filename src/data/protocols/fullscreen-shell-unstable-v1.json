{"type":"protocol","name":"fullscreen_shell_unstable_v1","copyright":{"type":"copyright","text":"Copyright © 2016 Yong Bakos\n    Copyright © 2015 Jason Ekstrand\n    Copyright © 2015 Jonas Ådahl\n\n    Permission is hereby granted, free of charge, to any person obtaining a\n    copy of this software and associated documentation files (the \"Software\"),\n    to deal in the Software without restriction, including without limitation\n    the rights to use, copy, modify, merge, publish, distribute, sublicense,\n    and/or sell copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice (including the next\n    paragraph) shall be included in all copies or substantial portions of the\n    Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n    DEALINGS IN THE SOFTWARE."},"interfaces":[{"type":"interface","name":"zwp_fullscreen_shell_v1","version":"1","description":{"type":"description","text":"Displays a single surface per output.\n\n      This interface provides a mechanism for a single client to display\n      simple full-screen surfaces.  While there technically may be multiple\n      clients bound to this interface, only one of those clients should be\n      shown at a time.\n\n      To present a surface, the client uses either the present_surface or\n      present_surface_for_mode requests.  Presenting a surface takes effect\n      on the next wl_surface.commit.  See the individual requests for\n      details about scaling and mode switches.\n\n      The client can have at most one surface per output at any time.\n      Requesting a surface to be presented on an output that already has a\n      surface replaces the previously presented surface.  Presenting a null\n      surface removes its content and effectively disables the output.\n      Exactly what happens when an output is \"disabled\" is\n      compositor-specific.  The same surface may be presented on multiple\n      outputs simultaneously.\n\n      Once a surface is presented on an output, it stays on that output\n      until either the client removes it or the compositor destroys the\n      output.  This way, the client can update the output's contents by\n      simply attaching a new buffer.\n\n      Warning! The protocol described in this file is experimental and\n      backward incompatible changes may be made. Backward compatible changes\n      may be added together with the corresponding interface version bump.\n      Backward incompatible changes are done by bumping the version number in\n      the protocol and interface names and resetting the interface version.\n      Once the protocol is to be declared stable, the 'z' prefix and the\n      version number in the protocol and interface names are removed and the\n      interface version number is reset.","summary":"displays a single surface per output"},"requests":[{"type":"request","name":"release","requestType":"destructor","description":{"type":"description","text":"Release the binding from the wl_fullscreen_shell interface.\n\n\tThis destroys the server-side object and frees this binding.  If\n\tthe client binds to wl_fullscreen_shell multiple times, it may wish\n\tto free some of those bindings.","summary":"release the wl_fullscreen_shell interface"},"args":[]},{"type":"request","name":"present_surface","description":{"type":"description","text":"Present a surface on the given output.\n\n\tIf the output is null, the compositor will present the surface on\n\twhatever display (or displays) it thinks best.  In particular, this\n\tmay replace any or all surfaces currently presented so it should\n\tnot be used in combination with placing surfaces on specific\n\toutputs.\n\n\tThe method parameter is a hint to the compositor for how the surface\n\tis to be presented.  In particular, it tells the compositor how to\n\thandle a size mismatch between the presented surface and the\n\toutput.  The compositor is free to ignore this parameter.\n\n\tThe \"zoom\", \"zoom_crop\", and \"stretch\" methods imply a scaling\n\toperation on the surface.  This will override any kind of output\n\tscaling, so the buffer_scale property of the surface is effectively\n\tignored.\n\n\tThis request gives the surface the role of a fullscreen shell surface.\n\tIf the surface already has another role, it raises a role protocol\n\terror.","summary":"present surface for display"},"args":[{"type":"arg","name":"surface","argType":"object","interface":"wl_surface","allowNull":"true"},{"type":"arg","name":"method","argType":"uint","enum":"present_method"},{"type":"arg","name":"output","argType":"object","interface":"wl_output","allowNull":"true"}]},{"type":"request","name":"present_surface_for_mode","description":{"type":"description","text":"Presents a surface on the given output for a particular mode.\n\n\tIf the current size of the output differs from that of the surface,\n\tthe compositor will attempt to change the size of the output to\n\tmatch the surface.  The result of the mode-switch operation will be\n\treturned via the provided wl_fullscreen_shell_mode_feedback object.\n\n\tIf the current output mode matches the one requested or if the\n\tcompositor successfully switches the mode to match the surface,\n\tthen the mode_successful event will be sent and the output will\n\tcontain the contents of the given surface.  If the compositor\n\tcannot match the output size to the surface size, the mode_failed\n\twill be sent and the output will contain the contents of the\n\tpreviously presented surface (if any).  If another surface is\n\tpresented on the given output before either of these has a chance\n\tto happen, the present_cancelled event will be sent.\n\n\tDue to race conditions and other issues unknown to the client, no\n\tmode-switch operation is guaranteed to succeed.  However, if the\n\tmode is one advertised by wl_output.mode or if the compositor\n\tadvertises the ARBITRARY_MODES capability, then the client should\n\texpect that the mode-switch operation will usually succeed.\n\n\tIf the size of the presented surface changes, the resulting output\n\tis undefined.  The compositor may attempt to change the output mode\n\tto compensate.  However, there is no guarantee that a suitable mode\n\twill be found and the client has no way to be notified of success\n\tor failure.\n\n\tThe framerate parameter specifies the desired framerate for the\n\toutput in mHz.  The compositor is free to ignore this parameter.  A\n\tvalue of 0 indicates that the client has no preference.\n\n\tIf the value of wl_output.scale differs from wl_surface.buffer_scale,\n\tthen the compositor may choose a mode that matches either the buffer\n\tsize or the surface size.  In either case, the surface will fill the\n\toutput.\n\n\tThis request gives the surface the role of a fullscreen shell surface.\n\tIf the surface already has another role, it raises a role protocol\n\terror.","summary":"present surface for display at a particular mode"},"args":[{"type":"arg","name":"surface","argType":"object","interface":"wl_surface"},{"type":"arg","name":"output","argType":"object","interface":"wl_output"},{"type":"arg","name":"framerate","argType":"int"},{"type":"arg","name":"feedback","argType":"new_id","interface":"zwp_fullscreen_shell_mode_feedback_v1"}]}],"events":[{"type":"event","name":"capability","description":{"type":"description","text":"Advertises a single capability of the compositor.\n\n\tWhen the wl_fullscreen_shell interface is bound, this event is emitted\n\tonce for each capability advertised.  Valid capabilities are given by\n\tthe wl_fullscreen_shell.capability enum.  If clients want to take\n\tadvantage of any of these capabilities, they should use a\n\twl_display.sync request immediately after binding to ensure that they\n\treceive all the capability events.","summary":"advertises a capability of the compositor"},"args":[{"type":"arg","name":"capability","argType":"uint","enum":"capability"}]}],"enums":[{"type":"enum","name":"capability","bitfield":false,"description":{"type":"description","text":"Various capabilities that can be advertised by the compositor.  They\n\tare advertised one-at-a-time when the wl_fullscreen_shell interface is\n\tbound.  See the wl_fullscreen_shell.capability event for more details.\n\n\tARBITRARY_MODES:\n\tThis is a hint to the client that indicates that the compositor is\n\tcapable of setting practically any mode on its outputs.  If this\n\tcapability is provided, wl_fullscreen_shell.present_surface_for_mode\n\twill almost never fail and clients should feel free to set whatever\n\tmode they like.  If the compositor does not advertise this, it may\n\tstill support some modes that are not advertised through wl_global.mode\n\tbut it is less likely.\n\n\tCURSOR_PLANE:\n\tThis is a hint to the client that indicates that the compositor can\n\thandle a cursor surface from the client without actually compositing.\n\tThis may be because of a hardware cursor plane or some other mechanism.\n\tIf the compositor does not advertise this capability then setting\n\twl_pointer.cursor may degrade performance or be ignored entirely.  If\n\tCURSOR_PLANE is not advertised, it is recommended that the client draw\n\tits own cursor and set wl_pointer.cursor(NULL).","summary":"capabilities advertised by the compositor"},"entries":[{"type":"entry","name":"arbitrary_modes","value":"1","summary":"compositor is capable of almost any output mode"},{"type":"entry","name":"cursor_plane","value":"2","summary":"compositor has a separate cursor plane"}]},{"type":"enum","name":"present_method","bitfield":false,"description":{"type":"description","text":"Hints to indicate to the compositor how to deal with a conflict\n\tbetween the dimensions of the surface and the dimensions of the\n\toutput. The compositor is free to ignore this parameter.","summary":"different method to set the surface fullscreen"},"entries":[{"type":"entry","name":"default","value":"0","summary":"no preference, apply default policy"},{"type":"entry","name":"center","value":"1","summary":"center the surface on the output"},{"type":"entry","name":"zoom","value":"2","summary":"scale the surface, preserving aspect ratio, to the largest size that will fit on the output"},{"type":"entry","name":"zoom_crop","value":"3","summary":"scale the surface, preserving aspect ratio, to fully fill the output cropping if needed"},{"type":"entry","name":"stretch","value":"4","summary":"scale the surface to the size of the output ignoring aspect ratio"}]},{"type":"enum","name":"error","bitfield":false,"description":{"type":"description","text":"These errors can be emitted in response to wl_fullscreen_shell requests.","summary":"wl_fullscreen_shell error values"},"entries":[{"type":"entry","name":"invalid_method","value":"0","summary":"present_method is not known"},{"type":"entry","name":"role","value":"1","summary":"given wl_surface has another role"}]}]},{"type":"interface","name":"zwp_fullscreen_shell_mode_feedback_v1","version":"1","requests":[],"events":[{"type":"event","name":"mode_successful","description":{"type":"description","text":"This event indicates that the attempted mode switch operation was\n\tsuccessful.  A surface of the size requested in the mode switch\n\twill fill the output without scaling.\n\n\tUpon receiving this event, the client should destroy the\n\twl_fullscreen_shell_mode_feedback object.","summary":"mode switch succeeded"},"args":[]},{"type":"event","name":"mode_failed","description":{"type":"description","text":"This event indicates that the attempted mode switch operation\n\tfailed.  This may be because the requested output mode is not\n\tpossible or it may mean that the compositor does not want to allow it.\n\n\tUpon receiving this event, the client should destroy the\n\twl_fullscreen_shell_mode_feedback object.","summary":"mode switch failed"},"args":[]},{"type":"event","name":"present_cancelled","description":{"type":"description","text":"This event indicates that the attempted mode switch operation was\n\tcancelled.  Most likely this is because the client requested a\n\tsecond mode switch before the first one completed.\n\n\tUpon receiving this event, the client should destroy the\n\twl_fullscreen_shell_mode_feedback object.","summary":"mode switch cancelled"},"args":[]}],"enums":[]}]}