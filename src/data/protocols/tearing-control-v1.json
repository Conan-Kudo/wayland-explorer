{"type":"protocol","name":"tearing_control_v1","copyright":{"type":"copyright","text":"Copyright Â© 2021 Xaver Hugl\n\n    Permission is hereby granted, free of charge, to any person obtaining a\n    copy of this software and associated documentation files (the \"Software\"),\n    to deal in the Software without restriction, including without limitation\n    the rights to use, copy, modify, merge, publish, distribute, sublicense,\n    and/or sell copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice (including the next\n    paragraph) shall be included in all copies or substantial portions of the\n    Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n    DEALINGS IN THE SOFTWARE."},"interfaces":[{"type":"interface","name":"wp_tearing_control_manager_v1","version":"1","description":{"type":"description","text":"For some use cases like games or drawing tablets it can make sense to\n      reduce latency by accepting tearing with the use of asynchronous page\n      flips. This global is a factory interface, allowing clients to inform\n      which type of presentation the content of their surfaces is suitable for.\n\n      Graphics APIs like EGL or Vulkan, that manage the buffer queue and commits\n      of a wl_surface themselves, are likely to be using this extension\n      internally. If a client is using such an API for a wl_surface, it should\n      not directly use this extension on that surface, to avoid raising a\n      tearing_control_exists protocol error.\n\n      Warning! The protocol described in this file is currently in the testing\n      phase. Backward compatible changes may be added together with the\n      corresponding interface version bump. Backward incompatible changes can\n      only be done by creating a new major version of the extension.","summary":"protocol for tearing control"},"requests":[{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"Destroy this tearing control factory object. Other objects, including\n        wp_tearing_control_v1 objects created by this factory, are not affected\n        by this request.","summary":"destroy tearing control factory object"},"args":[]},{"type":"request","name":"get_tearing_control","description":{"type":"description","text":"Instantiate an interface extension for the given wl_surface to request\n        asynchronous page flips for presentation.\n\n        If the given wl_surface already has a wp_tearing_control_v1 object\n        associated, the tearing_control_exists protocol error is raised.","summary":"extend surface interface for tearing control"},"args":[{"type":"arg","name":"id","argType":"new_id","interface":"wp_tearing_control_v1"},{"type":"arg","name":"surface","argType":"object","interface":"wl_surface"}]}],"events":[],"enums":[{"type":"enum","name":"error","bitfield":false,"entries":[{"type":"entry","name":"tearing_control_exists","value":"0","summary":"the surface already has a tearing object associated"}]}]},{"type":"interface","name":"wp_tearing_control_v1","version":"1","description":{"type":"description","text":"An additional interface to a wl_surface object, which allows the client\n      to hint to the compositor if the content on the surface is suitable for\n      presentation with tearing.\n      The default presentation hint is vsync. See presentation_hint for more\n      details.","summary":"per-surface tearing control interface"},"requests":[{"type":"request","name":"set_presentation_hint","description":{"type":"description","text":"Set the presentation hint for the associated wl_surface. This state is\n        double-buffered and is applied on the next wl_surface.commit.\n\n        The compositor is free to dynamically respect or ignore this hint based\n        on various conditions like hardware capabilities, surface state and\n        user preferences.","summary":"set presentation hint"},"args":[{"type":"arg","name":"hint","argType":"uint","enum":"presentation_hint"}]},{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"Destroy this surface tearing object and revert the presentation hint to\n        vsync. The change will be applied on the next wl_surface.commit.","summary":"destroy tearing control object"},"args":[]}],"events":[],"enums":[{"type":"enum","name":"presentation_hint","bitfield":false,"description":{"type":"description","text":"This enum provides information for if submitted frames from the client\n        may be presented with tearing.","summary":"presentation hint values"},"entries":[{"type":"entry","name":"vsync","value":"0","description":{"type":"description","text":"The content of this surface is meant to be synchronized to the\n          vertical blanking period. This should not result in visible tearing\n          and may result in a delay before a surface commit is presented.","summary":"tearing-free presentation"}},{"type":"entry","name":"async","value":"1","description":{"type":"description","text":"The content of this surface is meant to be presented with minimal\n          latency and tearing is acceptable.","summary":"asynchronous presentation"}}]}]}]}