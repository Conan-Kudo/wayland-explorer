{"type":"protocol","name":"relative_pointer_unstable_v1","copyright":{"type":"copyright","text":"Copyright © 2014      Jonas Ådahl\n    Copyright © 2015      Red Hat Inc.\n\n    Permission is hereby granted, free of charge, to any person obtaining a\n    copy of this software and associated documentation files (the \"Software\"),\n    to deal in the Software without restriction, including without limitation\n    the rights to use, copy, modify, merge, publish, distribute, sublicense,\n    and/or sell copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice (including the next\n    paragraph) shall be included in all copies or substantial portions of the\n    Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n    DEALINGS IN THE SOFTWARE."},"description":{"type":"description","text":"This protocol specifies a set of interfaces used for making clients able to\n    receive relative pointer events not obstructed by barriers (such as the\n    monitor edge or other pointer barriers).\n\n    To start receiving relative pointer events, a client must first bind the\n    global interface \"wp_relative_pointer_manager\" which, if a compositor\n    supports relative pointer motion events, is exposed by the registry. After\n    having created the relative pointer manager proxy object, the client uses\n    it to create the actual relative pointer object using the\n    \"get_relative_pointer\" request given a wl_pointer. The relative pointer\n    motion events will then, when applicable, be transmitted via the proxy of\n    the newly created relative pointer object. See the documentation of the\n    relative pointer interface for more details.\n\n    Warning! The protocol described in this file is experimental and backward\n    incompatible changes may be made. Backward compatible changes may be added\n    together with the corresponding interface version bump. Backward\n    incompatible changes are done by bumping the version number in the protocol\n    and interface names and resetting the interface version. Once the protocol\n    is to be declared stable, the 'z' prefix and the version number in the\n    protocol and interface names are removed and the interface version number is\n    reset.","summary":"protocol for relative pointer motion events"},"interfaces":[{"type":"interface","name":"zwp_relative_pointer_manager_v1","version":"1","description":{"type":"description","text":"A global interface used for getting the relative pointer object for a\n      given pointer.","summary":"get relative pointer objects"},"requests":[{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"Used by the client to notify the server that it will no longer use this\n\trelative pointer manager object.","summary":"destroy the relative pointer manager object"},"args":[]},{"type":"request","name":"get_relative_pointer","description":{"type":"description","text":"Create a relative pointer interface given a wl_pointer object. See the\n\twp_relative_pointer interface for more details.","summary":"get a relative pointer object"},"args":[{"type":"arg","name":"id","argType":"new_id","interface":"zwp_relative_pointer_v1"},{"type":"arg","name":"pointer","argType":"object","interface":"wl_pointer"}]}],"events":[],"enums":[]},{"type":"interface","name":"zwp_relative_pointer_v1","version":"1","description":{"type":"description","text":"A wp_relative_pointer object is an extension to the wl_pointer interface\n      used for emitting relative pointer events. It shares the same focus as\n      wl_pointer objects of the same seat and will only emit events when it has\n      focus.","summary":"relative pointer object"},"requests":[{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","summary":"release the relative pointer object"},"args":[]}],"events":[{"type":"event","name":"relative_motion","description":{"type":"description","text":"Relative x/y pointer motion from the pointer of the seat associated with\n\tthis object.\n\n\tA relative motion is in the same dimension as regular wl_pointer motion\n\tevents, except they do not represent an absolute position. For example,\n\tmoving a pointer from (x, y) to (x', y') would have the equivalent\n\trelative motion (x' - x, y' - y). If a pointer motion caused the\n\tabsolute pointer position to be clipped by for example the edge of the\n\tmonitor, the relative motion is unaffected by the clipping and will\n\trepresent the unclipped motion.\n\n\tThis event also contains non-accelerated motion deltas. The\n\tnon-accelerated delta is, when applicable, the regular pointer motion\n\tdelta as it was before having applied motion acceleration and other\n\ttransformations such as normalization.\n\n\tNote that the non-accelerated delta does not represent 'raw' events as\n\tthey were read from some device. Pointer motion acceleration is device-\n\tand configuration-specific and non-accelerated deltas and accelerated\n\tdeltas may have the same value on some devices.\n\n\tRelative motions are not coupled to wl_pointer.motion events, and can be\n\tsent in combination with such events, but also independently. There may\n\talso be scenarios where wl_pointer.motion is sent, but there is no\n\trelative motion. The order of an absolute and relative motion event\n\toriginating from the same physical motion is not guaranteed.\n\n\tIf the client needs button events or focus state, it can receive them\n\tfrom a wl_pointer object of the same seat that the wp_relative_pointer\n\tobject is associated with.","summary":"relative pointer motion"},"args":[{"type":"arg","name":"utime_hi","argType":"uint","summary":"high 32 bits of a 64 bit timestamp with microsecond granularity"},{"type":"arg","name":"utime_lo","argType":"uint","summary":"low 32 bits of a 64 bit timestamp with microsecond granularity"},{"type":"arg","name":"dx","argType":"fixed","summary":"the x component of the motion vector"},{"type":"arg","name":"dy","argType":"fixed","summary":"the y component of the motion vector"},{"type":"arg","name":"dx_unaccel","argType":"fixed","summary":"the x component of the unaccelerated motion vector"},{"type":"arg","name":"dy_unaccel","argType":"fixed","summary":"the y component of the unaccelerated motion vector"}]}],"enums":[]}]}