{"type":"protocol","name":"weston_output_capture","copyright":{"type":"copyright","text":"Copyright 2020, 2022 Collabora, Ltd.\n\n    Permission is hereby granted, free of charge, to any person obtaining a\n    copy of this software and associated documentation files (the \"Software\"),\n    to deal in the Software without restriction, including without limitation\n    the rights to use, copy, modify, merge, publish, distribute, sublicense,\n    and/or sell copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice (including the next\n    paragraph) shall be included in all copies or substantial portions of the\n    Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n    DEALINGS IN THE SOFTWARE."},"interfaces":[{"type":"interface","name":"weston_capture_v1","version":"1","description":{"type":"description","text":"The global interface exposing Weston screenshooting functionality\n      intended for single shots.\n\n      This is a privileged inteface.","summary":"image capture factory"},"requests":[{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"Affects no other protocol objects in any way.","summary":"unbind image capture factory"},"args":[]},{"type":"request","name":"create","description":{"type":"description","text":"This creates a weston_capture_source_v1 object corresponding to the\n        given wl_output. The object delivers information for allocating\n        suitable buffers, and exposes the capture function.\n\n        The object will be using the given pixel source for capturing images.\n        If the source is not available, all attempts to capture will fail\n        gracefully.\n\n        'writeback' source will use hardware writeback feature of DRM KMS for\n        capturing. This may allow hardware planes to remain used\n        during the capture. This source is often not available.\n\n        'framebuffer' source copies the contents of the final framebuffer.\n        Using this source temporarily disables all use of hardware planes and\n        DRM KMS color pipeline features. This source is always available.\n\n        'full_framebuffer' is otherwise the same as 'framebuffer' except it\n        will include also any borders (decorations) that the framebuffer may\n        contain.\n\n        'blending' source copies the contents of the intermediate blending\n        buffer, which should be in linear-light format.  Using this source\n        temporarily disables all use of hardware planes. This source is only\n        available when a blending buffer exists, e.g. when color management\n        is active on the output.\n\n        If the pixel source is not one of the defined enumeration values,\n        'invalid_source' protocol error is raised.","summary":"create an object for capturing output images"},"args":[{"type":"arg","name":"output","argType":"object","summary":"output to shoot","interface":"wl_output"},{"type":"arg","name":"source","argType":"uint","summary":"pixel source","enum":"source"},{"type":"arg","name":"capture_source_new_id","argType":"new_id","summary":"new object","interface":"weston_capture_source_v1"}]}],"events":[],"enums":[{"type":"enum","name":"error","bitfield":false,"entries":[{"type":"entry","name":"invalid_source","value":"0","summary":"invalid source enum value"}]},{"type":"enum","name":"source","bitfield":false,"entries":[{"type":"entry","name":"writeback","value":"0","summary":"use hardware writeback"},{"type":"entry","name":"framebuffer","value":"1","summary":"copy from framebuffer, desktop area"},{"type":"entry","name":"full_framebuffer","value":"2","summary":"copy whole framebuffer, including borders"},{"type":"entry","name":"blending","value":"3","summary":"copy from blending space"}]}]},{"type":"interface","name":"weston_capture_source_v1","version":"1","description":{"type":"description","text":"An object representing image capturing functionality for a single\n      source. When created, it sends the initial events if and only if the\n      output still exists and the specified pixel source is available on\n      the output.","summary":"image capturing source"},"requests":[{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"If a capture is on-going on this object, this will cancel it and\n        make the image buffer contents undefined.\n\n        This object is destroyed.","summary":"cancel the capture, and destroy"},"args":[]},{"type":"request","name":"capture","description":{"type":"description","text":"If the given wl_buffer is compatible, the associated output will go\n        through a repaint some time after this request has been processed,\n        and that repaint will execute the capture.\n        Once the capture is complete, 'complete' event is emitted.\n\n        If the given wl_buffer is incompatible, the event 'retry' is\n        emitted.\n\n        If the capture fails or the buffer type is unsupported, the event\n        'failed' is emitted.\n\n        The client must wait for one of these events before attempting\n        'capture' on this object again. If 'capture' is requested again before\n        any of those events, 'sequence' protocol error is raised.\n\n        The wl_buffer object will not emit wl_buffer.release event due to\n        this request.\n\n        The wl_buffer must refer to compositor-writable storage. If buffer\n        storage is not writable, either the protocol error bad_buffer or\n        wl_shm.error.invalid_fd is raised.\n\n        If the wl_buffer is destroyed before any event is emitted, the buffer\n        contents become undefined.\n\n        A compositor is required to implement capture into wl_shm buffers.\n        Other buffer types may or may not be supported.","summary":"capture an image"},"args":[{"type":"arg","name":"buffer","argType":"object","summary":"a writable image buffer","interface":"wl_buffer"}]}],"events":[{"type":"event","name":"format","description":{"type":"description","text":"This event delivers the pixel format that should be used for the\n        image buffer. Any buffer is incompatible if it does not have\n        this pixel format.\n\n        The format modifier is linear (DRM_FORMAT_MOD_LINEAR).\n\n        This is an initial event, and sent whenever the required format\n        changes.","summary":"pixel format for a buffer"},"args":[{"type":"arg","name":"drm_format","argType":"uint","summary":"DRM pixel format code"}]},{"type":"event","name":"size","description":{"type":"description","text":"This event delivers the size that should be used for the\n        image buffer. Any buffer is incompatible if it does not have\n        this size.\n\n        Row alignment of the buffer must be 4 bytes, and it must not contain\n        further row padding. Otherwise the buffer is unsupported.\n\n        This is an initial event, and sent whenever the required size\n        changes.","summary":"dimensions for a buffer"},"args":[{"type":"arg","name":"width","argType":"int","summary":"width in pixels"},{"type":"arg","name":"height","argType":"int","summary":"height in pixels"}]},{"type":"event","name":"complete","description":{"type":"description","text":"This event is emitted as a response to 'capture' request when it\n        has successfully completed.\n\n        If the buffer used in the shot is a dmabuf, the client also needs to\n        wait for any implicit fences on it before accessing the contents.","summary":"capture has completed"},"args":[]},{"type":"event","name":"retry","description":{"type":"description","text":"This event is emitted as a response to 'capture' request when it\n        cannot succeed due to an incompatible buffer. The client has already\n        received the events delivering the new buffer parameters. The client\n        should retry the capture with the new buffer parameters.","summary":"retry image capture with a different buffer"},"args":[]},{"type":"event","name":"failed","description":{"type":"description","text":"This event is emitted as a response to 'capture' request when it\n        has failed for reasons other than an incompatible buffer. The reasons\n        may include: unsupported buffer type, unsupported buffer stride,\n        unsupported image source, the image source (output) was removed, or\n        compositor policy denied the capture.\n\n        The string 'msg' may contain a human-readable explanation of the\n        failure to aid debugging.","summary":"capture failed"},"args":[{"type":"arg","name":"msg","argType":"string","summary":"human-readable hint","allowNull":"true"}]}],"enums":[{"type":"enum","name":"error","bitfield":false,"entries":[{"type":"entry","name":"bad_buffer","value":"0","summary":"the wl_buffer is not writable"},{"type":"entry","name":"sequence","value":"1","summary":"capture requested again before previous retired"}]}]}]}