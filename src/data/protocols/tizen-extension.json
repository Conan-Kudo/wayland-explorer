{"type":"protocol","name":"tizen_extension","interfaces":[{"type":"interface","name":"tizen_surface","version":"1","requests":[{"type":"request","name":"get_tizen_resource","args":[{"type":"arg","name":"id","argType":"new_id","interface":"tizen_resource"},{"type":"arg","name":"surface","argType":"object","interface":"wl_surface"}]}],"events":[],"enums":[]},{"type":"interface","name":"tizen_resource","version":"1","requests":[{"type":"request","name":"destroy","requestType":"destructor","args":[]}],"events":[{"type":"event","name":"resource_id","args":[{"type":"arg","name":"id","argType":"uint"}]}],"enums":[]},{"type":"interface","name":"tizen_policy","version":"4","requests":[{"type":"request","name":"get_visibility","args":[{"type":"arg","name":"id","argType":"new_id","summary":"new visibility object","interface":"tizen_visibility"},{"type":"arg","name":"surface","argType":"object","summary":"surface object","interface":"wl_surface"}]},{"type":"request","name":"get_position","args":[{"type":"arg","name":"id","argType":"new_id","summary":"new position object","interface":"tizen_position"},{"type":"arg","name":"surface","argType":"object","summary":"surface object","interface":"wl_surface"}]},{"type":"request","name":"activate","args":[{"type":"arg","name":"surface","argType":"object","summary":"surface object","interface":"wl_surface"}]},{"type":"request","name":"activate_below_by_res_id","args":[{"type":"arg","name":"res_id","argType":"uint"},{"type":"arg","name":"below_res_id","argType":"uint"}]},{"type":"request","name":"raise","args":[{"type":"arg","name":"surface","argType":"object","summary":"surface object","interface":"wl_surface"}]},{"type":"request","name":"lower","args":[{"type":"arg","name":"surface","argType":"object","summary":"surface object","interface":"wl_surface"}]},{"type":"request","name":"lower_by_res_id","args":[{"type":"arg","name":"res_id","argType":"uint"}]},{"type":"request","name":"set_focus_skip","args":[{"type":"arg","name":"surface","argType":"object","summary":"surface object","interface":"wl_surface"}]},{"type":"request","name":"unset_focus_skip","args":[{"type":"arg","name":"surface","argType":"object","summary":"surface object","interface":"wl_surface"}]},{"type":"request","name":"set_role","args":[{"type":"arg","name":"surface","argType":"object","summary":"surface object","interface":"wl_surface"},{"type":"arg","name":"role","argType":"string"}]},{"type":"request","name":"set_type","args":[{"type":"arg","name":"surface","argType":"object","interface":"wl_surface"},{"type":"arg","name":"win_type","argType":"uint"}]},{"type":"request","name":"set_conformant","args":[{"type":"arg","name":"surface","argType":"object","summary":"surface object","interface":"wl_surface"}]},{"type":"request","name":"unset_conformant","args":[{"type":"arg","name":"surface","argType":"object","summary":"surface object","interface":"wl_surface"}]},{"type":"request","name":"get_conformant","args":[{"type":"arg","name":"surface","argType":"object","summary":"surface object","interface":"wl_surface"}]},{"type":"request","name":"set_notification_level","args":[{"type":"arg","name":"surface","argType":"object","interface":"wl_surface"},{"type":"arg","name":"level","argType":"int"}]},{"type":"request","name":"set_transient_for","args":[{"type":"arg","name":"child_id","argType":"uint"},{"type":"arg","name":"parent_id","argType":"uint"}]},{"type":"request","name":"unset_transient_for","args":[{"type":"arg","name":"child_id","argType":"uint"}]},{"type":"request","name":"set_window_screen_mode","args":[{"type":"arg","name":"surface","argType":"object","interface":"wl_surface"},{"type":"arg","name":"mode","argType":"uint"}]},{"type":"request","name":"place_subsurface_below_parent","args":[{"type":"arg","name":"subsurface","argType":"object","interface":"wl_subsurface"}]},{"type":"request","name":"set_subsurface_stand_alone","args":[{"type":"arg","name":"subsurface","argType":"object","interface":"wl_subsurface"}]},{"type":"request","name":"get_subsurface","args":[{"type":"arg","name":"id","argType":"new_id","interface":"wl_subsurface"},{"type":"arg","name":"surface","argType":"object","interface":"wl_surface"},{"type":"arg","name":"parent_id","argType":"uint"}]},{"type":"request","name":"set_opaque_state","args":[{"type":"arg","name":"surface","argType":"object","interface":"wl_surface"},{"type":"arg","name":"state","argType":"int"}]},{"type":"request","name":"iconify","args":[{"type":"arg","name":"surface","argType":"object","summary":"surface object","interface":"wl_surface"}]},{"type":"request","name":"uniconify","args":[{"type":"arg","name":"surface","argType":"object","summary":"surface object","interface":"wl_surface"}]},{"type":"request","name":"add_aux_hint","args":[{"type":"arg","name":"surface","argType":"object","interface":"wl_surface"},{"type":"arg","name":"id","argType":"int"},{"type":"arg","name":"name","argType":"string"},{"type":"arg","name":"value","argType":"string"}]},{"type":"request","name":"change_aux_hint","args":[{"type":"arg","name":"surface","argType":"object","interface":"wl_surface"},{"type":"arg","name":"id","argType":"int"},{"type":"arg","name":"value","argType":"string"}]},{"type":"request","name":"del_aux_hint","args":[{"type":"arg","name":"surface","argType":"object","interface":"wl_surface"},{"type":"arg","name":"id","argType":"int"}]},{"type":"request","name":"get_supported_aux_hints","args":[{"type":"arg","name":"surface","argType":"object","interface":"wl_surface"}]},{"type":"request","name":"set_background_state","args":[{"type":"arg","name":"pid","argType":"uint"}]},{"type":"request","name":"unset_background_state","args":[{"type":"arg","name":"pid","argType":"uint"}]},{"type":"request","name":"set_floating_mode","args":[{"type":"arg","name":"surface","argType":"object","summary":"surface object","interface":"wl_surface"}]},{"type":"request","name":"unset_floating_mode","args":[{"type":"arg","name":"surface","argType":"object","summary":"surface object","interface":"wl_surface"}]},{"type":"request","name":"set_stack_mode","args":[{"type":"arg","name":"surface","argType":"object","interface":"wl_surface"},{"type":"arg","name":"mode","argType":"uint"}]},{"type":"request","name":"activate_above_by_res_id","args":[{"type":"arg","name":"res_id","argType":"uint"},{"type":"arg","name":"above_res_id","argType":"uint"}]},{"type":"request","name":"get_subsurface_watcher","since":"2","args":[{"type":"arg","name":"id","argType":"new_id","interface":"tizen_subsurface_watcher"},{"type":"arg","name":"surface","argType":"object","interface":"wl_surface"}]},{"type":"request","name":"set_parent","since":"3","args":[{"type":"arg","name":"child","argType":"object","interface":"wl_surface"},{"type":"arg","name":"parent","argType":"object","interface":"wl_surface"}]},{"type":"request","name":"ack_conformant_region","since":"4","description":{"type":"description","text":"A client can refresh its surface for applying new conformant region which\n         is from tizen_policy@conformant_region event. The client has to ack\n         after complete of its updates by this request.","summary":"ack for tizen_policy@conformant_region"},"args":[{"type":"arg","name":"surface","argType":"object","summary":"surface object","interface":"wl_surface"},{"type":"arg","name":"serial","argType":"uint"}]}],"events":[{"type":"event","name":"conformant","args":[{"type":"arg","name":"surface","argType":"object","summary":"surface object","interface":"wl_surface"},{"type":"arg","name":"is_conformant","argType":"uint"}]},{"type":"event","name":"conformant_area","description":{"type":"description","text":"Notify of conformant area to client. Sending this event does NOT guarantee\n          perfect compositing of conformant owner client surface and\n          conformant part client surface.","summary":"Notify of conformant area"},"args":[{"type":"arg","name":"surface","argType":"object","summary":"surface object","interface":"wl_surface"},{"type":"arg","name":"conformant_part","argType":"uint"},{"type":"arg","name":"state","argType":"uint"},{"type":"arg","name":"x","argType":"int"},{"type":"arg","name":"y","argType":"int"},{"type":"arg","name":"w","argType":"int"},{"type":"arg","name":"h","argType":"int"}]},{"type":"event","name":"notification_done","args":[{"type":"arg","name":"surface","argType":"object","interface":"wl_surface"},{"type":"arg","name":"level","argType":"int"},{"type":"arg","name":"error_state","argType":"uint"}]},{"type":"event","name":"transient_for_done","args":[{"type":"arg","name":"child_id","argType":"uint"}]},{"type":"event","name":"window_screen_mode_done","args":[{"type":"arg","name":"surface","argType":"object","interface":"wl_surface"},{"type":"arg","name":"mode","argType":"uint"},{"type":"arg","name":"error_state","argType":"uint"}]},{"type":"event","name":"iconify_state_changed","args":[{"type":"arg","name":"surface","argType":"object","interface":"wl_surface"},{"type":"arg","name":"iconified","argType":"uint"},{"type":"arg","name":"force","argType":"uint"}]},{"type":"event","name":"supported_aux_hints","args":[{"type":"arg","name":"surface","argType":"object","interface":"wl_surface"},{"type":"arg","name":"hints","argType":"array"},{"type":"arg","name":"num_hints","argType":"uint"}]},{"type":"event","name":"allowed_aux_hint","args":[{"type":"arg","name":"surface","argType":"object","interface":"wl_surface"},{"type":"arg","name":"id","argType":"int"}]},{"type":"event","name":"aux_message","args":[{"type":"arg","name":"surface","argType":"object","interface":"wl_surface"},{"type":"arg","name":"key","argType":"string"},{"type":"arg","name":"value","argType":"string"},{"type":"arg","name":"options","argType":"array"}]},{"type":"event","name":"conformant_region","since":"4","description":{"type":"description","text":"The server can notify of conformant region(area) using this event.\n         If client is received this event, client should ack for it using\n         tizen_policy@ack_conformant_region request.","summary":"notify of geometry values of conformant region(area)"},"args":[{"type":"arg","name":"surface","argType":"object","summary":"surface object","interface":"wl_surface"},{"type":"arg","name":"conformant_part","argType":"uint"},{"type":"arg","name":"state","argType":"uint"},{"type":"arg","name":"x","argType":"int"},{"type":"arg","name":"y","argType":"int"},{"type":"arg","name":"w","argType":"int"},{"type":"arg","name":"h","argType":"int"},{"type":"arg","name":"serial","argType":"uint"}]}],"enums":[{"type":"enum","name":"win_type","bitfield":false,"entries":[{"type":"entry","name":"none","value":"0"},{"type":"entry","name":"toplevel","value":"1"},{"type":"entry","name":"fullscreen","value":"2"},{"type":"entry","name":"maximized","value":"3"},{"type":"entry","name":"transient","value":"4"},{"type":"entry","name":"menu","value":"5"},{"type":"entry","name":"dnd","value":"6"},{"type":"entry","name":"custom","value":"7"},{"type":"entry","name":"notification","value":"8"},{"type":"entry","name":"utility","value":"9"},{"type":"entry","name":"dialog","value":"10"},{"type":"entry","name":"dock","value":"11"},{"type":"entry","name":"splash","value":"12"}]},{"type":"enum","name":"conformant_part","bitfield":false,"entries":[{"type":"entry","name":"indicator","value":"0"},{"type":"entry","name":"keyboard","value":"1"},{"type":"entry","name":"clipboard","value":"2"}]},{"type":"enum","name":"error_state","bitfield":false,"entries":[{"type":"entry","name":"none","value":"0"},{"type":"entry","name":"permission_denied","value":"1"}]},{"type":"enum","name":"level","bitfield":false,"entries":[{"type":"entry","name":"1","value":"0"},{"type":"entry","name":"2","value":"1"},{"type":"entry","name":"3","value":"2"},{"type":"entry","name":"none","value":"-1"},{"type":"entry","name":"default","value":"10"},{"type":"entry","name":"medium","value":"20"},{"type":"entry","name":"high","value":"30"},{"type":"entry","name":"top","value":"40"}]},{"type":"enum","name":"mode","bitfield":false,"entries":[{"type":"entry","name":"default","value":"0"},{"type":"entry","name":"always_on","value":"1"}]},{"type":"enum","name":"stack_mode","bitfield":false,"entries":[{"type":"entry","name":"none","value":"0"},{"type":"entry","name":"above","value":"1"},{"type":"entry","name":"below","value":"2"}]}]},{"type":"interface","name":"tizen_visibility","version":"1","requests":[{"type":"request","name":"destroy","requestType":"destructor","args":[]}],"events":[{"type":"event","name":"notify","args":[{"type":"arg","name":"visibility","argType":"uint"}]}],"enums":[{"type":"enum","name":"visibility","bitfield":false,"entries":[{"type":"entry","name":"unobscured","value":"0"},{"type":"entry","name":"partially_obscured","value":"1"},{"type":"entry","name":"fully_obscured","value":"2"}]}]},{"type":"interface","name":"tizen_position","version":"1","requests":[{"type":"request","name":"destroy","requestType":"destructor","args":[]},{"type":"request","name":"set","args":[{"type":"arg","name":"x","argType":"int"},{"type":"arg","name":"y","argType":"int"}]}],"events":[{"type":"event","name":"changed","args":[{"type":"arg","name":"x","argType":"int"},{"type":"arg","name":"y","argType":"int"}]}],"enums":[]},{"type":"interface","name":"tizen_gesture","version":"1","requests":[{"type":"request","name":"grab_edge_swipe","args":[{"type":"arg","name":"fingers","argType":"uint"},{"type":"arg","name":"edge","argType":"uint","enum":"edge"}]},{"type":"request","name":"ungrab_edge_swipe","args":[{"type":"arg","name":"fingers","argType":"uint"},{"type":"arg","name":"edge","argType":"uint","enum":"edge"}]}],"events":[{"type":"event","name":"grab_edge_swipe_notify","args":[{"type":"arg","name":"fingers","argType":"uint"},{"type":"arg","name":"edge","argType":"uint","enum":"edge"},{"type":"arg","name":"error","argType":"uint"}]},{"type":"event","name":"edge_swipe","args":[{"type":"arg","name":"mode","argType":"uint","enum":"mode"},{"type":"arg","name":"fingers","argType":"uint"},{"type":"arg","name":"sx","argType":"int","summary":"x coordinate of touch down point"},{"type":"arg","name":"sy","argType":"int","summary":"y coordinate of touch down point"},{"type":"arg","name":"edge","argType":"uint","enum":"edge"}]}],"enums":[{"type":"enum","name":"error","bitfield":false,"entries":[{"type":"entry","name":"none","value":"0"},{"type":"entry","name":"invalid_data","value":"1"},{"type":"entry","name":"no_permission","value":"2"},{"type":"entry","name":"no_system_resources","value":"3"},{"type":"entry","name":"grabbed_already","value":"4"}]},{"type":"enum","name":"type","bitfield":false,"entries":[{"type":"entry","name":"edge_swipe","value":"1"}]},{"type":"enum","name":"mode","bitfield":false,"entries":[{"type":"entry","name":"begin","value":"1"},{"type":"entry","name":"update","value":"2"},{"type":"entry","name":"end","value":"3"},{"type":"entry","name":"done","value":"4"}]},{"type":"enum","name":"edge","bitfield":false,"entries":[{"type":"entry","name":"top","value":"1"},{"type":"entry","name":"right","value":"2"},{"type":"entry","name":"bottom","value":"4"},{"type":"entry","name":"left","value":"8"}]}]},{"type":"interface","name":"tizen_keyrouter","version":"1","description":{"type":"description","text":"In tradition, all the keys in a keyboard and a device on which\n      some keys are attached will be sent to focus surface by default.\n      Currently it's possible to set up each focus for each key in a keyboard and a device.\n      Therefore, by setting a key grab for a surface, the owner of the\n      surface will get the key event when it has the key grab for the key.","summary":"an interface to set each focus for each key"},"requests":[{"type":"request","name":"set_keygrab","args":[{"type":"arg","name":"surface","argType":"object","interface":"wl_surface","allowNull":"true"},{"type":"arg","name":"key","argType":"uint"},{"type":"arg","name":"mode","argType":"uint"}]},{"type":"request","name":"unset_keygrab","args":[{"type":"arg","name":"surface","argType":"object","interface":"wl_surface","allowNull":"true"},{"type":"arg","name":"key","argType":"uint"}]},{"type":"request","name":"get_keygrab_status","args":[{"type":"arg","name":"surface","argType":"object","interface":"wl_surface","allowNull":"true"},{"type":"arg","name":"key","argType":"uint"}]},{"type":"request","name":"set_keygrab_list","args":[{"type":"arg","name":"surface","argType":"object","interface":"wl_surface","allowNull":"true"},{"type":"arg","name":"grab_list","argType":"array","summary":"array of two integer variables pairs each pairs consist of keycode and keygrab mode"}]},{"type":"request","name":"unset_keygrab_list","args":[{"type":"arg","name":"surface","argType":"object","interface":"wl_surface","allowNull":"true"},{"type":"arg","name":"ungrab_list","argType":"array","summary":"array of integer variables meaning keycode wanted to ungrab"}]},{"type":"request","name":"get_keygrab_list","args":[{"type":"arg","name":"surface","argType":"object","interface":"wl_surface","allowNull":"true"}]},{"type":"request","name":"set_register_none_key","args":[{"type":"arg","name":"surface","argType":"object","interface":"wl_surface","allowNull":"true"},{"type":"arg","name":"data","argType":"uint"}]},{"type":"request","name":"get_keyregister_status","args":[{"type":"arg","name":"data","argType":"uint"}]},{"type":"request","name":"set_input_config","args":[{"type":"arg","name":"surface","argType":"object","interface":"wl_surface","allowNull":"true"},{"type":"arg","name":"config_mode","argType":"uint"},{"type":"arg","name":"value","argType":"uint"}]}],"events":[{"type":"event","name":"keygrab_notify","args":[{"type":"arg","name":"surface","argType":"object","interface":"wl_surface","allowNull":"true"},{"type":"arg","name":"key","argType":"uint"},{"type":"arg","name":"mode","argType":"uint"},{"type":"arg","name":"error","argType":"uint"}]},{"type":"event","name":"keygrab_notify_list","args":[{"type":"arg","name":"surface","argType":"object","interface":"wl_surface","allowNull":"true"},{"type":"arg","name":"grab_result","argType":"array","summary":"array of three integer variables pairs each pairs consist of keycode, keygrab mode and keygrab result"}]},{"type":"event","name":"getgrab_notify_list","args":[{"type":"arg","name":"surface","argType":"object","interface":"wl_surface","allowNull":"true"},{"type":"arg","name":"grab_result","argType":"array","summary":"array of two integer variables pairs each pairs consist of keycode, keygrab mode"}]},{"type":"event","name":"set_register_none_key_notify","args":[{"type":"arg","name":"surface","argType":"object","interface":"wl_surface","allowNull":"true"},{"type":"arg","name":"mode","argType":"uint"}]},{"type":"event","name":"keyregister_notify","args":[{"type":"arg","name":"status","argType":"uint"}]},{"type":"event","name":"set_input_config_notify","args":[{"type":"arg","name":"status","argType":"uint"}]},{"type":"event","name":"key_cancel","args":[{"type":"arg","name":"key","argType":"uint"}]}],"enums":[{"type":"enum","name":"error","bitfield":false,"entries":[{"type":"entry","name":"none","value":"0","summary":"no error"},{"type":"entry","name":"invalid_surface","value":"1","summary":"Given surface is invalid."},{"type":"entry","name":"invalid_key","value":"2","summary":"Given key is invalid."},{"type":"entry","name":"invalid_mode","value":"3","summary":"Given mode is invalid."},{"type":"entry","name":"grabbed_already","value":"4","summary":"The key has been grabbed already."},{"type":"entry","name":"no_permission","value":"5","summary":"The wl client has no permission to grab the key."},{"type":"entry","name":"no_system_resources","value":"6","summary":"System resources are insufficient."},{"type":"entry","name":"invalid_array","value":"7","summary":"Given array has invalid pairs or data type."}]},{"type":"enum","name":"mode","bitfield":false,"description":{"type":"description","text":"This value is used to set a mode for a key grab. With this mode and\n        the order of the surface between surfaces' stack, the compositor will determine the destination client\n        surface.","summary":"mode for a key grab"},"entries":[{"type":"entry","name":"none","value":"0","summary":"none"},{"type":"entry","name":"shared","value":"1","summary":"mode to get a key grab with the other client surfaces when the focused client surface gets the key"},{"type":"entry","name":"topmost","value":"2","summary":"mode to get a key grab when the client surface is the top most surface"},{"type":"entry","name":"overridable_exclusive","value":"3","summary":"mode to get a key grab exclusively, overridably regardless of the order in the surface stack"},{"type":"entry","name":"exclusive","value":"4","summary":"mode to get a key grab exclusively regardless of the order in surface stack"},{"type":"entry","name":"registered","value":"5","summary":"mode to get a key grab only when a requesting surface is on top among the registering surfaces for the key"}]},{"type":"enum","name":"config_mode","bitfield":false,"description":{"type":"description","text":"This value is used to set a mode for a window. With this mode and\n        the order of the surface between surfaces' stack, the compositor will determine the destination client\n        surface.","summary":"mode for setting specific property for Key delivery"},"entries":[{"type":"entry","name":"none","value":"0","summary":"none"},{"type":"entry","name":"invisible_set","value":"1","summary":"mode to set window to enable send event to invisible window below in stack"},{"type":"entry","name":"invisible_get","value":"2","summary":"mode to set window to get event to invisible state if any top window has set register_set"},{"type":"entry","name":"num_key_focus","value":"3","summary":"mode to register for num keys for focus window"},{"type":"entry","name":"picture_off","value":"4","summary":"mode to set picture off for particular key"}]}]},{"type":"interface","name":"tizen_screenshooter","version":"1","description":{"type":"description","text":"Clients can get a screenmirror object from this interface.","summary":"interface for tizen-screenshooter"},"requests":[{"type":"request","name":"get_screenmirror","description":{"type":"description","text":"Before using screenmirror, a client should get a screenmirror object from display\n        server.","summary":"create a screenmirror object"},"args":[{"type":"arg","name":"id","argType":"new_id","summary":"new screenmirror object","interface":"tizen_screenmirror"},{"type":"arg","name":"output","argType":"object","summary":"output object for screenmirror","interface":"wl_output"}]},{"type":"request","name":"set_oneshot_auto_rotation","description":{"type":"description","text":"Client can set auto rotation value for one shot.","summary":"set screen shot auto rotation value"},"args":[{"type":"arg","name":"set","argType":"uint"}]}],"events":[{"type":"event","name":"format","description":{"type":"description","text":"The tbm format codes match the #defines in tbm_surface.h. The formats actually\n        supported by the compositor will be reported by the format event.","summary":"supported format for screenshooter"},"args":[{"type":"arg","name":"format","argType":"uint"}]},{"type":"event","name":"screenshooter_notify","description":{"type":"description","text":"Clients can get notification of screenshooter.","summary":"send notification of screenshooter"},"args":[{"type":"arg","name":"noti","argType":"uint"}]}],"enums":[]},{"type":"interface","name":"tizen_screenmirror","version":"1","description":{"type":"description","text":"A client can use this interface to get stream images of screen. Before starting,\n      queue all buffers. Then, start a screenmirror. After starting, a dequeued event\n      will occur when drawing a captured image on a buffer is finished. You might\n      need to queue the dequeued buffer again to get a new image from display server.","summary":"interface for screenmirror"},"requests":[{"type":"request","name":"destroy","requestType":"destructor","args":[]},{"type":"request","name":"set_stretch","args":[{"type":"arg","name":"stretch","argType":"uint","summary":"stretch type for screenmirror"}]},{"type":"request","name":"queue","description":{"type":"description","summary":"queue a buffer"},"args":[{"type":"arg","name":"buffer","argType":"object","summary":"buffer object for screenmirror","interface":"wl_buffer"}]},{"type":"request","name":"dequeue","description":{"type":"description","text":"A user can dequeue a buffer from display server when he wants to take back it from server.","summary":"dequeue a buffer"},"args":[{"type":"arg","name":"buffer","argType":"object","summary":"buffer object for screenmirror","interface":"wl_buffer"}]},{"type":"request","name":"start","args":[]},{"type":"request","name":"stop","args":[]}],"events":[{"type":"event","name":"dequeued","description":{"type":"description","text":"occurs when drawing a captured image on a buffer is finished","summary":"dequeued event"},"args":[{"type":"arg","name":"buffer","argType":"object","summary":"dequeued buffer which contains a captured image","interface":"wl_buffer"}]},{"type":"event","name":"content","description":{"type":"description","text":"occurs when the content of a captured image is changed. (normal or video)","summary":"content changed event"},"args":[{"type":"arg","name":"content","argType":"uint"}]},{"type":"event","name":"stop","description":{"type":"description","text":"occurs when the screenmirror is stopped eventually","summary":"stop event"},"args":[]}],"enums":[{"type":"enum","name":"content","bitfield":false,"entries":[{"type":"entry","name":"normal","value":"0"},{"type":"entry","name":"video","value":"1"}]},{"type":"enum","name":"stretch","bitfield":false,"entries":[{"type":"entry","name":"keep_ratio","value":"0"},{"type":"entry","name":"fully","value":"1"}]}]},{"type":"interface","name":"tizen_video","version":"1","description":{"type":"description","text":"Clients can get the video information that the compositor can handle from this interface.","summary":"interface for tizen-video"},"requests":[{"type":"request","name":"get_object","args":[{"type":"arg","name":"id","argType":"new_id","interface":"tizen_video_object"},{"type":"arg","name":"surface","argType":"object","interface":"wl_surface"}]},{"type":"request","name":"get_viewport","args":[{"type":"arg","name":"id","argType":"new_id","interface":"tizen_viewport"},{"type":"arg","name":"surface","argType":"object","interface":"wl_surface"}]}],"events":[{"type":"event","name":"format","description":{"type":"description","text":"The tbm format codes match the #defines in tbm_surface.h. The formats actually\n        supported by the compositor will be reported by the format event.","summary":"supported format for video"},"args":[{"type":"arg","name":"format","argType":"uint"}]}],"enums":[{"type":"enum","name":"error","bitfield":false,"entries":[{"type":"entry","name":"none","value":"0"},{"type":"entry","name":"object_exists","value":"1"},{"type":"entry","name":"viewport_exists","value":"2"}]}]},{"type":"interface","name":"tizen_video_object","version":"1","requests":[{"type":"request","name":"destroy","requestType":"destructor","args":[]},{"type":"request","name":"set_attribute","args":[{"type":"arg","name":"name","argType":"string"},{"type":"arg","name":"value","argType":"int"}]},{"type":"request","name":"follow_topmost_visibility","description":{"type":"description","text":"If tizen_video_object.follow_topmost_visibility is applied to a video_object,\n        It will be video mute control based on topmost visibility.","summary":"follow mute control change of a topmost surface"},"args":[]},{"type":"request","name":"unfollow_topmost_visibility","description":{"type":"description","text":"If tizen_video_object.unfollow_topmost_visibility is applied to a video_object,\n        It will not be video mute control based on topmost visibility.","summary":"unfollow mute control change of a topmost surface"},"args":[]}],"events":[{"type":"event","name":"attribute","args":[{"type":"arg","name":"name","argType":"string"},{"type":"arg","name":"value","argType":"uint"}]},{"type":"event","name":"size","args":[{"type":"arg","name":"min_w","argType":"int"},{"type":"arg","name":"min_h","argType":"int"},{"type":"arg","name":"max_w","argType":"int"},{"type":"arg","name":"max_h","argType":"int"},{"type":"arg","name":"prefer_align","argType":"int"}]}],"enums":[]},{"type":"interface","name":"tizen_subsurface_watcher","version":"1","requests":[],"events":[{"type":"event","name":"message","args":[{"type":"arg","name":"value","argType":"uint"}]}],"enums":[{"type":"enum","name":"msg","bitfield":false,"entries":[{"type":"entry","name":"success","value":"0"},{"type":"entry","name":"parent_id_invalid","value":"1"},{"type":"entry","name":"parent_id_destroyed","value":"2"}]}]},{"type":"interface","name":"tizen_viewport","version":"1","description":{"type":"description","text":"This is the alternative and convenient solution of wl_viewport to present\n    a surface on screen.\n\n    The below five functions can be replaced with this interface. The below\n    functions will be ignored after applying this interface to a surface.\n     - wl_surface.set_buffer_transform\n     - wl_surface.set_buffer_scale\n     - wl_subsurface.set_position\n     - wl_viewport.set_source\n     - wl_viewport.set_destination\n\n    wl_viewport.set_source is very complicated especially when the buffer of\n    wl_surface is transformed by wl_surface.set_buffer_transform. And when the\n    parent is resized, if we want to change the geometry of a subsurface also,\n    wl_subsurface.set_position and wl_viewport.set_destination should be called\n    everytime the parent is resized in client side. This makes difficult to\n    synchronize a parent surface and a subsurface on screen.\n\n    tizen_viewport allows clients to set the relative geometry to a subsurface\n    in a parent surface. Whenever a parent surface is resized, the geometry of\n    a subsurface will be calculated, moved and resized automatically by a\n    compositor. The tizen_viewport is specified in the coordinates of a\n    subsurface's parent.\n\n\tIf tizen_viewport is applied to a shell surface(toplevel), the all value related\n\twith x, y pos of tizen_viewport and tizen_destination_mode interface will be ignored.\n\n    The below 3 functions don't consider the transform of a parent's surface.\n     - tizen_viewport.set_source\n     - tizen_viewport.set_destination\n     - tizen_viewport.set_destination_ratio\n\n    Furthermore, tizen_destination_mode.follow_parent_transform is called,\n    tizen_viewport will consider the transform of a parent surface when applying\n    the destination mode to a subsurface. If tizen_destination_mode.follow_parent_transform\n    is applied to a shell surface, it will be ignored.\n\n    The destination will be cropped by a parent surface.\n\n    The change will be applied when wl_surface.commit is called.","summary":"the viewport for a surface"},"requests":[{"type":"request","name":"destroy","requestType":"destructor","args":[]},{"type":"request","name":"set_transform","description":{"type":"description","text":"The accepted values for the transform parameter are the values for wl_output.transform\n    according to the output transform.\n\n    The tizen_viewport.set_transform is applied only to itself. Basically it\n    doesn't effect the transform of its subsurfaces. That is, if 90 transform is\n    setted and its subsurface still has 0 transform, its subsurface won't be\n    rotated.\n\n    If needed to rotate the subsurface depended on a parent surface,\n    tizen_destination_mode.follow_parent_transform will make it possible.","summary":"set the transform of a surface"},"args":[{"type":"arg","name":"transform","argType":"uint"}]},{"type":"request","name":"set_source","description":{"type":"description","text":"The source rectangle won't be changed when a parent is resized. If it needs\n    to be changed, tizen_viewport.set_source should be called with new values.","summary":"set the source rectalge of a wl_buffer"},"args":[{"type":"arg","name":"x","argType":"uint"},{"type":"arg","name":"y","argType":"uint"},{"type":"arg","name":"width","argType":"uint"},{"type":"arg","name":"height","argType":"uint"}]},{"type":"request","name":"set_destination","description":{"type":"description","text":"The destination geometry won't be changed when a parent is resized. If it\n    needs to be changed, tizen_viewport.set_destination should be called with\n    new values.\n\n\tIf tizen_viewport is applied to a shell surface(toplevel), the x, y value of\n\ttizen_viewport.set_destination will be ignored.","summary":"set the destination geometry of a surface"},"args":[{"type":"arg","name":"x","argType":"int"},{"type":"arg","name":"y","argType":"int"},{"type":"arg","name":"width","argType":"uint"},{"type":"arg","name":"height","argType":"uint"}]},{"type":"request","name":"set_destination_ratio","description":{"type":"description","text":"The destination rectangle of a subsurface will be automatically changed\n    when a parent is resized. This allows the real number between 0.0 and 1.0.\n    See wl_fixed_from_double and wl_fixed_to_double.\n\n\tIf tizen_viewport is applied to a shell surface(toplevel), the x, y value of\n\ttizen_viewport.set_destination_ratio will be ignored.","summary":"set the ratio destination rectalge in a parent surface"},"args":[{"type":"arg","name":"x","argType":"fixed"},{"type":"arg","name":"y","argType":"fixed"},{"type":"arg","name":"width","argType":"fixed"},{"type":"arg","name":"height","argType":"fixed"}]},{"type":"request","name":"get_destination_mode","args":[{"type":"arg","name":"id","argType":"new_id","interface":"tizen_destination_mode"}]},{"type":"request","name":"query_parent_size","since":"1","description":{"type":"description","text":"A client can asks the display server to send the size of tizen_viewport object's\n    parent surface. Once a client requests it, the \"parent_size\" event will be sent\n    whenever the parent surface's size is changed.","summary":"set the ratio destination rectalge in a parent surface"},"args":[]},{"type":"request","name":"follow_parent_transform","description":{"type":"description","text":"The real transform of a subsurface is (parent's transform + subsurface's transform).\n    The subsurface will be rotated automatically when the parent is rotated.\n\n    If tizen_viewport.follow_parent_transform is applied to a shell surface(toplevel),\n    it will be ignored.","summary":"follow the transform change of a parent surface"},"args":[]},{"type":"request","name":"unfollow_parent_transform","args":[]}],"events":[{"type":"event","name":"destination_changed","args":[{"type":"arg","name":"transform","argType":"uint"},{"type":"arg","name":"x","argType":"int"},{"type":"arg","name":"y","argType":"int"},{"type":"arg","name":"width","argType":"uint"},{"type":"arg","name":"height","argType":"uint"}]},{"type":"event","name":"parent_size","args":[{"type":"arg","name":"width","argType":"uint"},{"type":"arg","name":"height","argType":"uint"}]}],"enums":[]},{"type":"interface","name":"tizen_destination_mode","version":"1","description":{"type":"description","text":"The destination rectangle will be automatically changed when a parent is\n    resized. When tizen_destination_mode.set is called, the value of\n    tizen_viewport.set_destination and tizen_viewport.set_destination_ratio\n    will be ignored.\n\n    The destination of a surface is decided by the mode, ratio, scale, offset\n    and align values. The ratio, scale, offset and align will be applied\n    sequentially.\n\n    The change will be applied when wl_surface.commit is called.","summary":"the destination mode for a surface"},"requests":[{"type":"request","name":"destroy","requestType":"destructor","args":[]},{"type":"request","name":"follow_parent_transform","description":{"type":"description","text":"The real transform of a subsurface is (parent's transform + subsurface's transform).\n    That is, the subsurface will be rotated automatically when the parent is rotated.\n\n    If tizen_destination_mode.follow_parent_transform is applied to a shell surface(toplevel),\n    it will be ignored.","summary":"follow the transform change of a parent surface"},"args":[]},{"type":"request","name":"unfollow_parent_transform","args":[]},{"type":"request","name":"set","args":[{"type":"arg","name":"mode","argType":"uint","enum":"type"}]},{"type":"request","name":"set_ratio","description":{"type":"description","text":"This allows the real number. See wl_fixed_from_double and wl_fixed_to_double.","summary":"set the ratio of the destination rectangle of a subsurface"},"args":[{"type":"arg","name":"horizontal","argType":"fixed"},{"type":"arg","name":"vertical","argType":"fixed"}]},{"type":"request","name":"set_scale","description":{"type":"description","text":"This allows the real number. See wl_fixed_from_double and wl_fixed_to_double.","summary":"set the scale of the destination rectangle of a subsurface"},"args":[{"type":"arg","name":"horizontal","argType":"fixed"},{"type":"arg","name":"vertical","argType":"fixed"}]},{"type":"request","name":"set_align","description":{"type":"description","text":"This allows the real number between 0.0 and 1.0. See wl_fixed_from_double and\n    wl_fixed_to_double.","summary":"set the align of the destination rectangle of a subsurface"},"args":[{"type":"arg","name":"horizontal","argType":"fixed"},{"type":"arg","name":"vertical","argType":"fixed"}]},{"type":"request","name":"set_offset","args":[{"type":"arg","name":"x","argType":"int"},{"type":"arg","name":"y","argType":"int"},{"type":"arg","name":"w","argType":"int"},{"type":"arg","name":"h","argType":"int"}]}],"events":[],"enums":[{"type":"enum","name":"error","bitfield":false,"entries":[{"type":"entry","name":"invalid_type","value":"0"}]},{"type":"enum","name":"type","bitfield":false,"entries":[{"type":"entry","name":"none","value":"0"},{"type":"entry","name":"letter_box","value":"1"},{"type":"entry","name":"origin","value":"2"},{"type":"entry","name":"full","value":"3"},{"type":"entry","name":"cropped_full","value":"4"},{"type":"entry","name":"origin_or_letter","value":"5"}]}]},{"type":"interface","name":"tizen_embedded_compositor","version":"1","description":{"type":"description","text":"The global obejct. Wayland has 3 type of compositor, embedded compositor is one of them.\n      But tizen application is sendboxing by smack, then a application not allow commutication to other application by socket.\n      So system or session compositor create socket and send to embedded compostior.","summary":"global embedded compositor object"},"requests":[{"type":"request","name":"get_socket","description":{"type":"description","text":"The get_socket request ask the server to create socket and emit socket event.","summary":"create new socket"},"args":[]}],"events":[{"type":"event","name":"socket","description":{"type":"description","text":"Sent immediately after get_socket request","summary":"socket fd"},"args":[{"type":"arg","name":"sock_fd","argType":"fd"}]}],"enums":[]},{"type":"interface","name":"tizen_input_device_manager","version":"1","description":{"type":"description","text":"Tizen input device manager is a global interface. This object has device add/remove events\n      to provide tizen input device object to a client. This allows for a client to get the con\n\n      Be sure to bind this interface after binding wl_seat interface.\n      Tizen input device manager interface will only provide device add/remove event for devices\n      which belongs to the wl_seat object(s) bound by the client. Therefore, the compositor needs to\n      create/send the device add/remove event only for the current client's seat(s).","summary":"global input device manager object"},"requests":[{"type":"request","name":"block_events","description":{"type":"description","text":"This request allows a client to request to block one or more events for its purpose.\n        By specifying class as an argument in the request, the events belongs to the class will be blocked\n        during the given duration. Note that an error event will be sent if there is any error.","summary":"request to block sending event(s)"},"args":[{"type":"arg","name":"serial","argType":"uint","summary":""},{"type":"arg","name":"clas","argType":"uint","enum":"clas"},{"type":"arg","name":"duration","argType":"uint","summary":"time duration with millisecond granularity"}]},{"type":"request","name":"unblock_events","description":{"type":"description","text":"This request allows a client to request to release the existing block for the client.\n        Note that no error event will be sent if there is no existing block for the client.","summary":"request to unblock sending event(s)"},"args":[{"type":"arg","name":"serial","argType":"uint","summary":""}]},{"type":"request","name":"init_generator","description":{"type":"description","summary":"initialize input generator system"},"args":[{"type":"arg","name":"clas","argType":"uint","enum":"clas"}]},{"type":"request","name":"deinit_generator","description":{"type":"description","summary":"deinitialize input generator system"},"args":[{"type":"arg","name":"clas","argType":"uint","enum":"clas"}]},{"type":"request","name":"generate_key","description":{"type":"description","summary":"generate a key event using specific or default device"},"args":[{"type":"arg","name":"keyname","argType":"string"},{"type":"arg","name":"pressed","argType":"uint"}]},{"type":"request","name":"generate_pointer","description":{"type":"description","summary":"generate a pointer event using specific or default device"},"args":[{"type":"arg","name":"type","argType":"uint","enum":"pointer_event_type"},{"type":"arg","name":"x","argType":"uint"},{"type":"arg","name":"y","argType":"uint"},{"type":"arg","name":"button","argType":"uint"}]},{"type":"request","name":"generate_touch","description":{"type":"description","summary":"generate a touch event using specific or default device"},"args":[{"type":"arg","name":"type","argType":"uint","enum":"pointer_event_type"},{"type":"arg","name":"x","argType":"uint"},{"type":"arg","name":"y","argType":"uint"},{"type":"arg","name":"finger","argType":"uint"}]},{"type":"request","name":"pointer_warp","description":{"type":"description","summary":"warp pointer to the relative position to the given surface"},"args":[{"type":"arg","name":"surface","argType":"object","interface":"wl_surface"},{"type":"arg","name":"x","argType":"fixed"},{"type":"arg","name":"y","argType":"fixed"}]}],"events":[{"type":"event","name":"device_add","description":{"type":"description","text":"The device add/remove notification is going to be sent when a physical/logical device is\n        added/removed to/from the given seat. Note that a tizen input device object can be assigned to\n        a wl_seat and can also be assigned to the other wl_seat at any time. Whenever a relationship between\n        a tizen input device object changes, device remove event from the current wl_seat object will be made\n        and device add event to the other wl_seat object will also be mode.","summary":"device addition event"},"args":[{"type":"arg","name":"serial","argType":"uint"},{"type":"arg","name":"identifier","argType":"string"},{"type":"arg","name":"device","argType":"new_id","interface":"tizen_input_device"},{"type":"arg","name":"seat","argType":"object","interface":"wl_seat"}]},{"type":"event","name":"device_remove","description":{"type":"description","text":"The device add/remove notification is going to be sent when a physical/logical device is\n        added/removed to/from the given seat. Note that a tizen input device object can be assigned to\n        a wl_seat and can also be assigned to the other wl_seat at any time. Whenever a relationship between\n        a tizen input device object changes, device remove event from the current wl_seat object will be made\n        and device add event to the other wl_seat object will also be mode.","summary":"device removal event"},"args":[{"type":"arg","name":"serial","argType":"uint"},{"type":"arg","name":"identifier","argType":"string"},{"type":"arg","name":"device","argType":"object","interface":"tizen_input_device"},{"type":"arg","name":"seat","argType":"object","interface":"wl_seat"}]},{"type":"event","name":"error","description":{"type":"description","summary":"error event"},"args":[{"type":"arg","name":"errorcode","argType":"uint","enum":"error"}]},{"type":"event","name":"block_expired","description":{"type":"description","text":"This event will be sent if the duration of existing block is expired.\n        Note that no block expired event will be sent if there is no block for the client.","summary":"block expiration event"},"args":[]}],"enums":[{"type":"enum","name":"clas","bitfield":false,"description":{"type":"description","summary":"device class"},"entries":[{"type":"entry","name":"none","value":"0","summary":"none of class"},{"type":"entry","name":"mouse","value":"1","summary":"mouse class"},{"type":"entry","name":"keyboard","value":"2","summary":"keyboard class"},{"type":"entry","name":"touchscreen","value":"4","summary":"touchscreen class"}]},{"type":"enum","name":"error","bitfield":false,"entries":[{"type":"entry","name":"none","value":"0","summary":"no error"},{"type":"entry","name":"no_permission","value":"1","summary":"no permission"},{"type":"entry","name":"invalid_class","value":"2","summary":"invalid class"},{"type":"entry","name":"blocked_already","value":"3","summary":"blocked already by the other client"},{"type":"entry","name":"no_system_resources","value":"4","summary":"no system resources such as memory lack"},{"type":"entry","name":"invalid_parameter","value":"5","summary":"argument is invalid"},{"type":"entry","name":"invalid_surface","value":"6","summary":"the given surface is not visible or pointer is not on the given surface"},{"type":"entry","name":"no_pointer_available","value":"7","summary":"there is no pointer available to warp"}]},{"type":"enum","name":"pointer_event_type","bitfield":false,"entries":[{"type":"entry","name":"begin","value":"0"},{"type":"entry","name":"update","value":"1"},{"type":"entry","name":"end","value":"2"}]}]},{"type":"interface","name":"tizen_input_device","version":"1","description":{"type":"description","text":"The tizen_input_device interface represents one or more input devices associated with a physical/logical\n      input device. This interface provides device specific information/events to allows for client to identify\n      the source device of an event or to get the additional axes/attributes of a device.\n      Note that a tizen_input_device object can be used for a physical input device and can also be used for a\n      group of input devices. e.g. a group of mouse devices","summary":"tizen input device object"},"requests":[{"type":"request","name":"select_axes","description":{"type":"description","summary":"request for selecting some of axes among the axes supported by a tizen_input_device object"},"args":[{"type":"arg","name":"axes","argType":"array","summary":"array of axis num"}]},{"type":"request","name":"release","requestType":"destructor","description":{"type":"description","summary":"release the tizen_input_device object"},"args":[]}],"events":[{"type":"event","name":"device_info","description":{"type":"description","summary":"event contains device information"},"args":[{"type":"arg","name":"name","argType":"string"},{"type":"arg","name":"clas","argType":"uint","enum":"clas"},{"type":"arg","name":"subclas","argType":"uint","enum":"subclas"},{"type":"arg","name":"axes","argType":"array","summary":"array of axis enum"}]},{"type":"event","name":"event_device","description":{"type":"description","summary":"event indicates the source device associated with a wl_pointer/keyboard/touch event"},"args":[{"type":"arg","name":"serial","argType":"uint"},{"type":"arg","name":"name","argType":"string"},{"type":"arg","name":"time","argType":"uint","summary":"timestamp with millisecond granularity"}]},{"type":"event","name":"axis","description":{"type":"description","summary":"axis change event"},"args":[{"type":"arg","name":"axis_type","argType":"uint","enum":"axis_type"},{"type":"arg","name":"value","argType":"fixed","summary":"axis value"}]}],"enums":[{"type":"enum","name":"clas","bitfield":false,"description":{"type":"description","summary":"device class"},"entries":[{"type":"entry","name":"none","value":"0","summary":"none of class"},{"type":"entry","name":"keyboard","value":"2","summary":"keyboard class"},{"type":"entry","name":"mouse","value":"3","summary":"mouse class"},{"type":"entry","name":"touchscreen","value":"4","summary":"touchscreen class"}]},{"type":"enum","name":"subclas","bitfield":false,"description":{"type":"description","summary":"device subclass"},"entries":[{"type":"entry","name":"none","value":"0","summary":"none of subclass"}]},{"type":"enum","name":"axis_type","bitfield":false,"description":{"type":"description","summary":"axis type enums which can be supported by a device"},"entries":[{"type":"entry","name":"none","value":"0","summary":"radius of x axis of an event area e.g. touching area with a finger or a pen"},{"type":"entry","name":"radius_x","value":"1","summary":"radius of x axis of an event area e.g. touching area with a finger or a pen"},{"type":"entry","name":"radius_y","value":"2","summary":"radius of y axis of an event area e.g. touching area with a finger or a pen"},{"type":"entry","name":"pressure","value":"3","summary":"pressure in an event area e.g. touching area with a finger or a pen"},{"type":"entry","name":"angle","value":"4","summary":"angle in an event area e.g. touching area with a finger or a pen"},{"type":"entry","name":"detent","value":"5","summary":"detent value e.g. moved distance with a rotary device"}]}]},{"type":"interface","name":"tizen_launchscreen","version":"1","requests":[{"type":"request","name":"create_img","args":[{"type":"arg","name":"id","argType":"new_id","summary":"new tizen_launch_image object","interface":"tizen_launch_image"}]}],"events":[],"enums":[]},{"type":"interface","name":"tizen_launch_image","version":"1","requests":[{"type":"request","name":"destroy","requestType":"destructor","args":[]},{"type":"request","name":"launch","args":[{"type":"arg","name":"file","argType":"string"},{"type":"arg","name":"file_type","argType":"uint"},{"type":"arg","name":"color_depth","argType":"uint"},{"type":"arg","name":"rotation","argType":"uint"},{"type":"arg","name":"indicator","argType":"uint"},{"type":"arg","name":"options","argType":"array"}]},{"type":"request","name":"owner","args":[{"type":"arg","name":"pid","argType":"uint"}]},{"type":"request","name":"show","args":[]},{"type":"request","name":"hide","args":[]}],"events":[],"enums":[{"type":"enum","name":"file_type","bitfield":false,"entries":[{"type":"entry","name":"img","value":"0","summary":"splash image file path"},{"type":"entry","name":"edj","value":"1","summary":"splash edj file path"}]},{"type":"enum","name":"indicator","bitfield":false,"entries":[{"type":"entry","name":"off","value":"0","summary":"splash hide indicator"},{"type":"entry","name":"on","value":"1","summary":"splash show indicator"}]},{"type":"enum","name":"rotation","bitfield":false,"entries":[{"type":"entry","name":"0","value":"0","summary":"rotation angle 0 degree"},{"type":"entry","name":"90","value":"90","summary":"rotation angle 90 degree"},{"type":"entry","name":"180","value":"180","summary":"rotation angle 180 degree"},{"type":"entry","name":"270","value":"270","summary":"rotation angle 270 degree"}]}]},{"type":"interface","name":"tizen_effect","version":"1","requests":[{"type":"request","name":"destroy","requestType":"destructor","args":[]}],"events":[{"type":"event","name":"start","args":[{"type":"arg","name":"surface","argType":"object","interface":"wl_surface"},{"type":"arg","name":"type","argType":"uint"}]},{"type":"event","name":"end","args":[{"type":"arg","name":"surface","argType":"object","interface":"wl_surface"},{"type":"arg","name":"type","argType":"uint"}]}],"enums":[{"type":"enum","name":"type","bitfield":false,"entries":[{"type":"entry","name":"none","value":"0","summary":"none"},{"type":"entry","name":"show","value":"1","summary":"show effect of window"},{"type":"entry","name":"hide","value":"2","summary":"hide effect of window"},{"type":"entry","name":"restack","value":"3","summary":"restack effect of window"}]}]},{"type":"interface","name":"tizen_display_policy","version":"1","requests":[{"type":"request","name":"set_window_brightness","args":[{"type":"arg","name":"surface","argType":"object","interface":"wl_surface"},{"type":"arg","name":"brightness","argType":"int"}]}],"events":[{"type":"event","name":"window_brightness_done","args":[{"type":"arg","name":"surface","argType":"object","interface":"wl_surface"},{"type":"arg","name":"brightness","argType":"int"},{"type":"arg","name":"error_state","argType":"uint"}]}],"enums":[{"type":"enum","name":"error_state","bitfield":false,"entries":[{"type":"entry","name":"none","value":"0"},{"type":"entry","name":"permission_denied","value":"1"}]}]},{"type":"interface","name":"tizen_indicator","version":"1","requests":[{"type":"request","name":"destroy","requestType":"destructor","args":[]},{"type":"request","name":"set_state","args":[{"type":"arg","name":"surface","argType":"object","summary":"surface object","interface":"wl_surface"},{"type":"arg","name":"state","argType":"int"}]},{"type":"request","name":"set_opacity_mode","args":[{"type":"arg","name":"surface","argType":"object","summary":"surface object","interface":"wl_surface"},{"type":"arg","name":"mode","argType":"int"}]},{"type":"request","name":"set_visible_type","args":[{"type":"arg","name":"surface","argType":"object","summary":"surface object","interface":"wl_surface"},{"type":"arg","name":"type","argType":"int"}]}],"events":[{"type":"event","name":"flick","args":[{"type":"arg","name":"surface","argType":"object","summary":"occur the flick event","interface":"wl_surface"},{"type":"arg","name":"type","argType":"int"}]}],"enums":[{"type":"enum","name":"state","bitfield":false,"entries":[{"type":"entry","name":"unknown","value":"0","summary":"unknown"},{"type":"entry","name":"off","value":"1","summary":"can not show indicator"},{"type":"entry","name":"on","value":"2","summary":"can show indicator"}]},{"type":"enum","name":"opacity_mode","bitfield":false,"entries":[{"type":"entry","name":"unknown","value":"0","summary":"unknown"},{"type":"entry","name":"opaque","value":"1","summary":"opaque mode"},{"type":"entry","name":"translucent","value":"2","summary":"translucent mode"},{"type":"entry","name":"transparent","value":"3","summary":"transparent all mode"},{"type":"entry","name":"bg_transparent","value":"4","summary":"transparent only background mode"}]},{"type":"enum","name":"visible_type","bitfield":false,"entries":[{"type":"entry","name":"hidden","value":"0","summary":"hidden type indicator"},{"type":"entry","name":"shown","value":"1","summary":"shown type indicator"}]}]},{"type":"interface","name":"tizen_clipboard","version":"2","description":{"type":"description","text":"This interface provides some requests and events about clipboard for other clients.","summary":"an interface for requests and event about clipboard"},"requests":[{"type":"request","name":"destroy","requestType":"destructor","args":[]},{"type":"request","name":"show","description":{"type":"description","summary":"request for show clipboard"},"args":[{"type":"arg","name":"surface","argType":"object","summary":"surface object","interface":"wl_surface"}]},{"type":"request","name":"hide","description":{"type":"description","summary":"request for hide clipboard"},"args":[{"type":"arg","name":"surface","argType":"object","summary":"surface object","interface":"wl_surface"}]},{"type":"request","name":"set_data_only","since":"2","description":{"type":"description","text":"A wayland client can notify of that the client is data only mode.\n           The data only mode means that this wayland client doesn't have any\n           wl_surfaces at all but it wants to use wl_data_device for some data\n           operations.","summary":"request for setting data only mode for this wl_client"},"args":[{"type":"arg","name":"set","argType":"uint"}]}],"events":[{"type":"event","name":"data_selected","description":{"type":"description","summary":"announce data are selected by clipboard"},"args":[{"type":"arg","name":"surface","argType":"object","summary":"surface object","interface":"wl_surface"}]},{"type":"event","name":"allowed_data_only","since":"2","description":{"type":"description","summary":"event to notify if data only set is allowed or not"},"args":[{"type":"arg","name":"allowed","argType":"uint"}]}],"enums":[]}]}