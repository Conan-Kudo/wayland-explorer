{"type":"protocol","name":"text_input_unstable_v3","copyright":{"type":"copyright","text":"Copyright © 2012, 2013 Intel Corporation\n    Copyright © 2015, 2016 Jan Arne Petersen\n    Copyright © 2017, 2018 Red Hat, Inc.\n    Copyright © 2018       Purism SPC\n\n    Permission to use, copy, modify, distribute, and sell this\n    software and its documentation for any purpose is hereby granted\n    without fee, provided that the above copyright notice appear in\n    all copies and that both that copyright notice and this permission\n    notice appear in supporting documentation, and that the name of\n    the copyright holders not be used in advertising or publicity\n    pertaining to distribution of the software without specific,\n    written prior permission.  The copyright holders make no\n    representations about the suitability of this software for any\n    purpose.  It is provided \"as is\" without express or implied\n    warranty.\n\n    THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS\n    SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\n    FITNESS, IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY\n    SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN\n    AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,\n    ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\n    THIS SOFTWARE."},"description":{"type":"description","text":"This protocol allows compositors to act as input methods and to send text\n    to applications. A text input object is used to manage state of what are\n    typically text entry fields in the application.\n\n    This document adheres to the RFC 2119 when using words like \"must\",\n    \"should\", \"may\", etc.\n\n    Warning! The protocol described in this file is experimental and\n    backward incompatible changes may be made. Backward compatible changes\n    may be added together with the corresponding interface version bump.\n    Backward incompatible changes are done by bumping the version number in\n    the protocol and interface names and resetting the interface version.\n    Once the protocol is to be declared stable, the 'z' prefix and the\n    version number in the protocol and interface names are removed and the\n    interface version number is reset.","summary":"Protocol for composing text"},"interfaces":[{"type":"interface","name":"zwp_text_input_v3","version":"1","description":{"type":"description","text":"The zwp_text_input_v3 interface represents text input and input methods\n      associated with a seat. It provides enter/leave events to follow the\n      text input focus for a seat.\n\n      Requests are used to enable/disable the text-input object and set\n      state information like surrounding and selected text or the content type.\n      The information about the entered text is sent to the text-input object\n      via the preedit_string and commit_string events.\n\n      Text is valid UTF-8 encoded, indices and lengths are in bytes. Indices\n      must not point to middle bytes inside a code point: they must either\n      point to the first byte of a code point or to the end of the buffer.\n      Lengths must be measured between two valid indices.\n\n      Focus moving throughout surfaces will result in the emission of\n      zwp_text_input_v3.enter and zwp_text_input_v3.leave events. The focused\n      surface must commit zwp_text_input_v3.enable and\n      zwp_text_input_v3.disable requests as the keyboard focus moves across\n      editable and non-editable elements of the UI. Those two requests are not\n      expected to be paired with each other, the compositor must be able to\n      handle consecutive series of the same request.\n\n      State is sent by the state requests (set_surrounding_text,\n      set_content_type and set_cursor_rectangle) and a commit request. After an\n      enter event or disable request all state information is invalidated and\n      needs to be resent by the client.","summary":"text input"},"requests":[{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"Destroy the wp_text_input object. Also disables all surfaces enabled\n        through this wp_text_input object.","summary":"Destroy the wp_text_input"},"args":[]},{"type":"request","name":"enable","description":{"type":"description","text":"Requests text input on the surface previously obtained from the enter\n        event.\n\n        This request must be issued every time the active text input changes\n        to a new one, including within the current surface. Use\n        zwp_text_input_v3.disable when there is no longer any input focus on\n        the current surface.\n\n        Clients must not enable more than one text input on the single seat\n        and should disable the current text input before enabling the new one.\n        At most one instance of text input may be in enabled state per instance,\n        Requests to enable the another text input when some text input is active\n        must be ignored by compositor.\n\n        This request resets all state associated with previous enable, disable,\n        set_surrounding_text, set_text_change_cause, set_content_type, and\n        set_cursor_rectangle requests, as well as the state associated with\n        preedit_string, commit_string, and delete_surrounding_text events.\n\n        The set_surrounding_text, set_content_type and set_cursor_rectangle\n        requests must follow if the text input supports the necessary\n        functionality.\n\n        State set with this request is double-buffered. It will get applied on\n        the next zwp_text_input_v3.commit request, and stay valid until the\n        next committed enable or disable request.\n\n        The changes must be applied by the compositor after issuing a\n        zwp_text_input_v3.commit request.","summary":"Request text input to be enabled"},"args":[]},{"type":"request","name":"disable","description":{"type":"description","text":"Explicitly disable text input on the current surface (typically when\n        there is no focus on any text entry inside the surface).\n\n        State set with this request is double-buffered. It will get applied on\n        the next zwp_text_input_v3.commit request.","summary":"Disable text input on a surface"},"args":[]},{"type":"request","name":"set_surrounding_text","description":{"type":"description","text":"Sets the surrounding plain text around the input, excluding the preedit\n        text.\n\n        The client should notify the compositor of any changes in any of the\n        values carried with this request, including changes caused by handling\n        incoming text-input events as well as changes caused by other\n        mechanisms like keyboard typing.\n\n        If the client is unaware of the text around the cursor, it should not\n        issue this request, to signify lack of support to the compositor.\n\n        Text is UTF-8 encoded, and should include the cursor position, the\n        complete selection and additional characters before and after them.\n        There is a maximum length of wayland messages, so text can not be\n        longer than 4000 bytes.\n\n        Cursor is the byte offset of the cursor within text buffer.\n\n        Anchor is the byte offset of the selection anchor within text buffer.\n        If there is no selected text, anchor is the same as cursor.\n\n        If any preedit text is present, it is replaced with a cursor for the\n        purpose of this event.\n\n        Values set with this request are double-buffered. They will get applied\n        on the next zwp_text_input_v3.commit request, and stay valid until the\n        next committed enable or disable request.\n\n        The initial state for affected fields is empty, meaning that the text\n        input does not support sending surrounding text. If the empty values\n        get applied, subsequent attempts to change them may have no effect.","summary":"sets the surrounding text"},"args":[{"type":"arg","name":"text","argType":"string"},{"type":"arg","name":"cursor","argType":"int"},{"type":"arg","name":"anchor","argType":"int"}]},{"type":"request","name":"set_text_change_cause","description":{"type":"description","text":"Tells the compositor why the text surrounding the cursor changed.\n\n        Whenever the client detects an external change in text, cursor, or\n        anchor posision, it must issue this request to the compositor. This\n        request is intended to give the input method a chance to update the\n        preedit text in an appropriate way, e.g. by removing it when the user\n        starts typing with a keyboard.\n\n        cause describes the source of the change.\n\n        The value set with this request is double-buffered. It must be applied\n        and reset to initial at the next zwp_text_input_v3.commit request.\n\n        The initial value of cause is input_method.","summary":"indicates the cause of surrounding text change"},"args":[{"type":"arg","name":"cause","argType":"uint","enum":"change_cause"}]},{"type":"request","name":"set_content_type","description":{"type":"description","text":"Sets the content purpose and content hint. While the purpose is the\n        basic purpose of an input field, the hint flags allow to modify some of\n        the behavior.\n\n        Values set with this request are double-buffered. They will get applied\n        on the next zwp_text_input_v3.commit request.\n        Subsequent attempts to update them may have no effect. The values\n        remain valid until the next committed enable or disable request.\n\n        The initial value for hint is none, and the initial value for purpose\n        is normal.","summary":"set content purpose and hint"},"args":[{"type":"arg","name":"hint","argType":"uint","enum":"content_hint"},{"type":"arg","name":"purpose","argType":"uint","enum":"content_purpose"}]},{"type":"request","name":"set_cursor_rectangle","description":{"type":"description","text":"Marks an area around the cursor as a x, y, width, height rectangle in\n        surface local coordinates.\n\n        Allows the compositor to put a window with word suggestions near the\n        cursor, without obstructing the text being input.\n\n        If the client is unaware of the position of edited text, it should not\n        issue this request, to signify lack of support to the compositor.\n\n        Values set with this request are double-buffered. They will get applied\n        on the next zwp_text_input_v3.commit request, and stay valid until the\n        next committed enable or disable request.\n\n        The initial values describing a cursor rectangle are empty. That means\n        the text input does not support describing the cursor area. If the\n        empty values get applied, subsequent attempts to change them may have\n        no effect.","summary":"set cursor position"},"args":[{"type":"arg","name":"x","argType":"int"},{"type":"arg","name":"y","argType":"int"},{"type":"arg","name":"width","argType":"int"},{"type":"arg","name":"height","argType":"int"}]},{"type":"request","name":"commit","description":{"type":"description","text":"Atomically applies state changes recently sent to the compositor.\n\n        The commit request establishes and updates the state of the client, and\n        must be issued after any changes to apply them.\n\n        Text input state (enabled status, content purpose, content hint,\n        surrounding text and change cause, cursor rectangle) is conceptually\n        double-buffered within the context of a text input, i.e. between a\n        committed enable request and the following committed enable or disable\n        request.\n\n        Protocol requests modify the pending state, as opposed to the current\n        state in use by the input method. A commit request atomically applies\n        all pending state, replacing the current state. After commit, the new\n        pending state is as documented for each related request.\n\n        Requests are applied in the order of arrival.\n\n        Neither current nor pending state are modified unless noted otherwise.\n\n        The compositor must count the number of commit requests coming from\n        each zwp_text_input_v3 object and use the count as the serial in done\n        events.","summary":"commit state"},"args":[]}],"events":[{"type":"event","name":"enter","description":{"type":"description","text":"Notification that this seat's text-input focus is on a certain surface.\n\n        If client has created multiple text input objects, compositor must send\n        this event to all of them.\n\n        When the seat has the keyboard capability the text-input focus follows\n        the keyboard focus. This event sets the current surface for the\n        text-input object.","summary":"enter event"},"args":[{"type":"arg","name":"surface","argType":"object","interface":"wl_surface"}]},{"type":"event","name":"leave","description":{"type":"description","text":"Notification that this seat's text-input focus is no longer on a\n        certain surface. The client should reset any preedit string previously\n        set.\n\n        The leave notification clears the current surface. It is sent before\n        the enter notification for the new focus. After leave event, compositor\n        must ignore requests from any text input instances until next enter\n        event.\n\n        When the seat has the keyboard capability the text-input focus follows\n        the keyboard focus.","summary":"leave event"},"args":[{"type":"arg","name":"surface","argType":"object","interface":"wl_surface"}]},{"type":"event","name":"preedit_string","description":{"type":"description","text":"Notify when a new composing text (pre-edit) should be set at the\n        current cursor position. Any previously set composing text must be\n        removed. Any previously existing selected text must be removed.\n\n        The argument text contains the pre-edit string buffer.\n\n        The parameters cursor_begin and cursor_end are counted in bytes\n        relative to the beginning of the submitted text buffer. Cursor should\n        be hidden when both are equal to -1.\n\n        They could be represented by the client as a line if both values are\n        the same, or as a text highlight otherwise.\n\n        Values set with this event are double-buffered. They must be applied\n        and reset to initial on the next zwp_text_input_v3.done event.\n\n        The initial value of text is an empty string, and cursor_begin,\n        cursor_end and cursor_hidden are all 0.","summary":"pre-edit"},"args":[{"type":"arg","name":"text","argType":"string","allowNull":"true"},{"type":"arg","name":"cursor_begin","argType":"int"},{"type":"arg","name":"cursor_end","argType":"int"}]},{"type":"event","name":"commit_string","description":{"type":"description","text":"Notify when text should be inserted into the editor widget. The text to\n        commit could be either just a single character after a key press or the\n        result of some composing (pre-edit).\n\n        Values set with this event are double-buffered. They must be applied\n        and reset to initial on the next zwp_text_input_v3.done event.\n\n        The initial value of text is an empty string.","summary":"text commit"},"args":[{"type":"arg","name":"text","argType":"string","allowNull":"true"}]},{"type":"event","name":"delete_surrounding_text","description":{"type":"description","text":"Notify when the text around the current cursor position should be\n        deleted.\n\n        Before_length and after_length are the number of bytes before and after\n        the current cursor index (excluding the selection) to delete.\n\n        If a preedit text is present, in effect before_length is counted from\n        the beginning of it, and after_length from its end (see done event\n        sequence).\n\n        Values set with this event are double-buffered. They must be applied\n        and reset to initial on the next zwp_text_input_v3.done event.\n\n        The initial values of both before_length and after_length are 0.","summary":"delete surrounding text"},"args":[{"type":"arg","name":"before_length","argType":"uint","summary":"length of text before current cursor position"},{"type":"arg","name":"after_length","argType":"uint","summary":"length of text after current cursor position"}]},{"type":"event","name":"done","description":{"type":"description","text":"Instruct the application to apply changes to state requested by the\n        preedit_string, commit_string and delete_surrounding_text events. The\n        state relating to these events is double-buffered, and each one\n        modifies the pending state. This event replaces the current state with\n        the pending state.\n\n        The application must proceed by evaluating the changes in the following\n        order:\n\n        1. Replace existing preedit string with the cursor.\n        2. Delete requested surrounding text.\n        3. Insert commit string with the cursor at its end.\n        4. Calculate surrounding text to send.\n        5. Insert new preedit text in cursor position.\n        6. Place cursor inside preedit text.\n\n        The serial number reflects the last state of the zwp_text_input_v3\n        object known to the compositor. The value of the serial argument must\n        be equal to the number of commit requests already issued on that object.\n\n        When the client receives a done event with a serial different than the\n        number of past commit requests, it must proceed with evaluating and\n        applying the changes as normal, except it should not change the current\n        state of the zwp_text_input_v3 object. All pending state requests\n        (set_surrounding_text, set_content_type and set_cursor_rectangle) on\n        the zwp_text_input_v3 object should be sent and committed after\n        receiving a zwp_text_input_v3.done event with a matching serial.","summary":"apply changes"},"args":[{"type":"arg","name":"serial","argType":"uint"}]}],"enums":[{"type":"enum","name":"change_cause","bitfield":false,"description":{"type":"description","text":"Reason for the change of surrounding text or cursor posision.","summary":"text change reason"},"entries":[{"type":"entry","name":"input_method","value":"0","summary":"input method caused the change"},{"type":"entry","name":"other","value":"1","summary":"something else than the input method caused the change"}]},{"type":"enum","name":"content_hint","bitfield":true,"description":{"type":"description","text":"Content hint is a bitmask to allow to modify the behavior of the text\n        input.","summary":"content hint"},"entries":[{"type":"entry","name":"none","value":"0x0","summary":"no special behavior"},{"type":"entry","name":"completion","value":"0x1","summary":"suggest word completions"},{"type":"entry","name":"spellcheck","value":"0x2","summary":"suggest word corrections"},{"type":"entry","name":"auto_capitalization","value":"0x4","summary":"switch to uppercase letters at the start of a sentence"},{"type":"entry","name":"lowercase","value":"0x8","summary":"prefer lowercase letters"},{"type":"entry","name":"uppercase","value":"0x10","summary":"prefer uppercase letters"},{"type":"entry","name":"titlecase","value":"0x20","summary":"prefer casing for titles and headings (can be language dependent)"},{"type":"entry","name":"hidden_text","value":"0x40","summary":"characters should be hidden"},{"type":"entry","name":"sensitive_data","value":"0x80","summary":"typed text should not be stored"},{"type":"entry","name":"latin","value":"0x100","summary":"just Latin characters should be entered"},{"type":"entry","name":"multiline","value":"0x200","summary":"the text input is multiline"}]},{"type":"enum","name":"content_purpose","bitfield":false,"description":{"type":"description","text":"The content purpose allows to specify the primary purpose of a text\n        input.\n\n        This allows an input method to show special purpose input panels with\n        extra characters or to disallow some characters.","summary":"content purpose"},"entries":[{"type":"entry","name":"normal","value":"0","summary":"default input, allowing all characters"},{"type":"entry","name":"alpha","value":"1","summary":"allow only alphabetic characters"},{"type":"entry","name":"digits","value":"2","summary":"allow only digits"},{"type":"entry","name":"number","value":"3","summary":"input a number (including decimal separator and sign)"},{"type":"entry","name":"phone","value":"4","summary":"input a phone number"},{"type":"entry","name":"url","value":"5","summary":"input an URL"},{"type":"entry","name":"email","value":"6","summary":"input an email address"},{"type":"entry","name":"name","value":"7","summary":"input a name of a person"},{"type":"entry","name":"password","value":"8","summary":"input a password (combine with sensitive_data hint)"},{"type":"entry","name":"pin","value":"9","summary":"input is a numeric password (combine with sensitive_data hint)"},{"type":"entry","name":"date","value":"10","summary":"input a date"},{"type":"entry","name":"time","value":"11","summary":"input a time"},{"type":"entry","name":"datetime","value":"12","summary":"input a date and time"},{"type":"entry","name":"terminal","value":"13","summary":"input for a terminal"}]}]},{"type":"interface","name":"zwp_text_input_manager_v3","version":"1","description":{"type":"description","text":"A factory for text-input objects. This object is a global singleton.","summary":"text input manager"},"requests":[{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"Destroy the wp_text_input_manager object.","summary":"Destroy the wp_text_input_manager"},"args":[]},{"type":"request","name":"get_text_input","description":{"type":"description","text":"Creates a new text-input object for a given seat.","summary":"create a new text input object"},"args":[{"type":"arg","name":"id","argType":"new_id","interface":"zwp_text_input_v3"},{"type":"arg","name":"seat","argType":"object","interface":"wl_seat"}]}],"events":[],"enums":[]}]}