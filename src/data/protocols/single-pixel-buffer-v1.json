{"type":"protocol","name":"single_pixel_buffer_v1","copyright":{"type":"copyright","text":"Copyright © 2022 Simon Ser\n\n    Permission is hereby granted, free of charge, to any person obtaining a\n    copy of this software and associated documentation files (the \"Software\"),\n    to deal in the Software without restriction, including without limitation\n    the rights to use, copy, modify, merge, publish, distribute, sublicense,\n    and/or sell copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice (including the next\n    paragraph) shall be included in all copies or substantial portions of the\n    Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n    DEALINGS IN THE SOFTWARE."},"description":{"type":"description","text":"This protocol extension allows clients to create single-pixel buffers.\n\n    Compositors supporting this protocol extension should also support the\n    viewporter protocol extension. Clients may use viewporter to scale a\n    single-pixel buffer to a desired size.\n\n    Warning! The protocol described in this file is currently in the testing\n    phase. Backward compatible changes may be added together with the\n    corresponding interface version bump. Backward incompatible changes can\n    only be done by creating a new major version of the extension.","summary":"single pixel buffer factory"},"interfaces":[{"type":"interface","name":"wp_single_pixel_buffer_manager_v1","version":"1","description":{"type":"description","text":"The wp_single_pixel_buffer_manager_v1 interface is a factory for\n      single-pixel buffers.","summary":"global factory for single-pixel buffers"},"requests":[{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"Destroy the wp_single_pixel_buffer_manager_v1 object.\n\n        The child objects created via this interface are unaffected.","summary":"destroy the manager"},"args":[]},{"type":"request","name":"create_u32_rgba_buffer","description":{"type":"description","text":"Create a single-pixel buffer from four 32-bit RGBA values.\n\n        Unless specified in another protocol extension, the RGBA values use\n        pre-multiplied alpha.\n\n        The width and height of the buffer are 1.","summary":"create a 1×1 buffer from 32-bit RGBA values"},"args":[{"type":"arg","name":"id","argType":"new_id","interface":"wl_buffer"},{"type":"arg","name":"r","argType":"uint","summary":"value of the buffer's red channel"},{"type":"arg","name":"g","argType":"uint","summary":"value of the buffer's green channel"},{"type":"arg","name":"b","argType":"uint","summary":"value of the buffer's blue channel"},{"type":"arg","name":"a","argType":"uint","summary":"value of the buffer's alpha channel"}]}],"events":[],"enums":[]}]}