{"type":"protocol","name":"tablet_v2","copyright":{"type":"copyright","text":"Copyright 2014 © Stephen \"Lyude\" Chandler Paul\n    Copyright 2015-2016 © Red Hat, Inc.\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation files\n    (the \"Software\"), to deal in the Software without restriction,\n    including without limitation the rights to use, copy, modify, merge,\n    publish, distribute, sublicense, and/or sell copies of the Software,\n    and to permit persons to whom the Software is furnished to do so,\n    subject to the following conditions:\n\n    The above copyright notice and this permission notice (including the\n    next paragraph) shall be included in all copies or substantial\n    portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n    BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n    ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE."},"description":{"type":"description","text":"This description provides a high-level overview of the interplay between\n    the interfaces defined this protocol. For details, see the protocol\n    specification.\n\n    More than one tablet may exist, and device-specifics matter. Tablets are\n    not represented by a single virtual device like wl_pointer. A client\n    binds to the tablet manager object which is just a proxy object. From\n    that, the client requests wp_tablet_manager.get_tablet_seat(wl_seat)\n    and that returns the actual interface that has all the tablets. With\n    this indirection, we can avoid merging wp_tablet into the actual Wayland\n    protocol, a long-term benefit.\n\n    The wp_tablet_seat sends a \"tablet added\" event for each tablet\n    connected. That event is followed by descriptive events about the\n    hardware; currently that includes events for name, vid/pid and\n    a wp_tablet.path event that describes a local path. This path can be\n    used to uniquely identify a tablet or get more information through\n    libwacom. Emulated or nested tablets can skip any of those, e.g. a\n    virtual tablet may not have a vid/pid. The sequence of descriptive\n    events is terminated by a wp_tablet.done event to signal that a client\n    may now finalize any initialization for that tablet.\n\n    Events from tablets require a tool in proximity. Tools are also managed\n    by the tablet seat; a \"tool added\" event is sent whenever a tool is new\n    to the compositor. That event is followed by a number of descriptive\n    events about the hardware; currently that includes capabilities,\n    hardware id and serial number, and tool type. Similar to the tablet\n    interface, a wp_tablet_tool.done event is sent to terminate that initial\n    sequence.\n\n    Any event from a tool happens on the wp_tablet_tool interface. When the\n    tool gets into proximity of the tablet, a proximity_in event is sent on\n    the wp_tablet_tool interface, listing the tablet and the surface. That\n    event is followed by a motion event with the coordinates. After that,\n    it's the usual motion, axis, button, etc. events. The protocol's\n    serialisation means events are grouped by wp_tablet_tool.frame events.\n\n    Two special events (that don't exist in X) are down and up. They signal\n    \"tip touching the surface\". For tablets without real proximity\n    detection, the sequence is: proximity_in, motion, down, frame.\n\n    When the tool leaves proximity, a proximity_out event is sent. If any\n    button is still down, a button release event is sent before this\n    proximity event. These button events are sent in the same frame as the\n    proximity event to signal to the client that the buttons were held when\n    the tool left proximity.\n\n    If the tool moves out of the surface but stays in proximity (i.e.\n    between windows), compositor-specific grab policies apply. This usually\n    means that the proximity-out is delayed until all buttons are released.\n\n    Moving a tool physically from one tablet to the other has no real effect\n    on the protocol, since we already have the tool object from the \"tool\n    added\" event. All the information is already there and the proximity\n    events on both tablets are all a client needs to reconstruct what\n    happened.\n\n    Some extra axes are normalized, i.e. the client knows the range as\n    specified in the protocol (e.g. [0, 65535]), the granularity however is\n    unknown. The current normalized axes are pressure, distance, and slider.\n\n    Other extra axes are in physical units as specified in the protocol.\n    The current extra axes with physical units are tilt, rotation and\n    wheel rotation.\n\n    Since tablets work independently of the pointer controlled by the mouse,\n    the focus handling is independent too and controlled by proximity.\n    The wp_tablet_tool.set_cursor request sets a tool-specific cursor.\n    This cursor surface may be the same as the mouse cursor, and it may be\n    the same across tools but it is possible to be more fine-grained. For\n    example, a client may set different cursors for the pen and eraser.\n\n    Tools are generally independent of tablets and it is\n    compositor-specific policy when a tool can be removed. Common approaches\n    will likely include some form of removing a tool when all tablets the\n    tool was used on are removed.","summary":"Wayland protocol for graphics tablets"},"interfaces":[{"type":"interface","name":"zwp_tablet_manager_v2","version":"1","description":{"type":"description","text":"An object that provides access to the graphics tablets available on this\n      system. All tablets are associated with a seat, to get access to the\n      actual tablets, use wp_tablet_manager.get_tablet_seat.","summary":"controller object for graphic tablet devices"},"requests":[{"type":"request","name":"get_tablet_seat","description":{"type":"description","text":"Get the wp_tablet_seat object for the given seat. This object\n\tprovides access to all graphics tablets in this seat.","summary":"get the tablet seat"},"args":[{"type":"arg","name":"tablet_seat","argType":"new_id","interface":"zwp_tablet_seat_v2"},{"type":"arg","name":"seat","argType":"object","summary":"The wl_seat object to retrieve the tablets for","interface":"wl_seat"}]},{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"Destroy the wp_tablet_manager object. Objects created from this\n\tobject are unaffected and should be destroyed separately.","summary":"release the memory for the tablet manager object"},"args":[]}],"events":[],"enums":[]},{"type":"interface","name":"zwp_tablet_seat_v2","version":"1","description":{"type":"description","text":"An object that provides access to the graphics tablets available on this\n      seat. After binding to this interface, the compositor sends a set of\n      wp_tablet_seat.tablet_added and wp_tablet_seat.tool_added events.","summary":"controller object for graphic tablet devices of a seat"},"requests":[{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"Destroy the wp_tablet_seat object. Objects created from this\n\tobject are unaffected and should be destroyed separately.","summary":"release the memory for the tablet seat object"},"args":[]}],"events":[{"type":"event","name":"tablet_added","description":{"type":"description","text":"This event is sent whenever a new tablet becomes available on this\n\tseat. This event only provides the object id of the tablet, any\n\tstatic information about the tablet (device name, vid/pid, etc.) is\n\tsent through the wp_tablet interface.","summary":"new device notification"},"args":[{"type":"arg","name":"id","argType":"new_id","summary":"the newly added graphics tablet","interface":"zwp_tablet_v2"}]},{"type":"event","name":"tool_added","description":{"type":"description","text":"This event is sent whenever a tool that has not previously been used\n\twith a tablet comes into use. This event only provides the object id\n\tof the tool; any static information about the tool (capabilities,\n\ttype, etc.) is sent through the wp_tablet_tool interface.","summary":"a new tool has been used with a tablet"},"args":[{"type":"arg","name":"id","argType":"new_id","summary":"the newly added tablet tool","interface":"zwp_tablet_tool_v2"}]},{"type":"event","name":"pad_added","description":{"type":"description","text":"This event is sent whenever a new pad is known to the system. Typically,\n\tpads are physically attached to tablets and a pad_added event is\n\tsent immediately after the wp_tablet_seat.tablet_added.\n\tHowever, some standalone pad devices logically attach to tablets at\n\truntime, and the client must wait for wp_tablet_pad.enter to know\n\tthe tablet a pad is attached to.\n\n\tThis event only provides the object id of the pad. All further\n\tfeatures (buttons, strips, rings) are sent through the wp_tablet_pad\n\tinterface.","summary":"new pad notification"},"args":[{"type":"arg","name":"id","argType":"new_id","summary":"the newly added pad","interface":"zwp_tablet_pad_v2"}]}],"enums":[]},{"type":"interface","name":"zwp_tablet_tool_v2","version":"1","description":{"type":"description","text":"An object that represents a physical tool that has been, or is\n      currently in use with a tablet in this seat. Each wp_tablet_tool\n      object stays valid until the client destroys it; the compositor\n      reuses the wp_tablet_tool object to indicate that the object's\n      respective physical tool has come into proximity of a tablet again.\n\n      A wp_tablet_tool object's relation to a physical tool depends on the\n      tablet's ability to report serial numbers. If the tablet supports\n      this capability, then the object represents a specific physical tool\n      and can be identified even when used on multiple tablets.\n\n      A tablet tool has a number of static characteristics, e.g. tool type,\n      hardware_serial and capabilities. These capabilities are sent in an\n      event sequence after the wp_tablet_seat.tool_added event before any\n      actual events from this tool. This initial event sequence is\n      terminated by a wp_tablet_tool.done event.\n\n      Tablet tool events are grouped by wp_tablet_tool.frame events.\n      Any events received before a wp_tablet_tool.frame event should be\n      considered part of the same hardware state change.","summary":"a physical tablet tool"},"requests":[{"type":"request","name":"set_cursor","description":{"type":"description","text":"Sets the surface of the cursor used for this tool on the given\n\ttablet. This request only takes effect if the tool is in proximity\n\tof one of the requesting client's surfaces or the surface parameter\n\tis the current pointer surface. If there was a previous surface set\n\twith this request it is replaced. If surface is NULL, the cursor\n\timage is hidden.\n\n\tThe parameters hotspot_x and hotspot_y define the position of the\n\tpointer surface relative to the pointer location. Its top-left corner\n\tis always at (x, y) - (hotspot_x, hotspot_y), where (x, y) are the\n\tcoordinates of the pointer location, in surface-local coordinates.\n\n\tOn surface.attach requests to the pointer surface, hotspot_x and\n\thotspot_y are decremented by the x and y parameters passed to the\n\trequest. Attach must be confirmed by wl_surface.commit as usual.\n\n\tThe hotspot can also be updated by passing the currently set pointer\n\tsurface to this request with new values for hotspot_x and hotspot_y.\n\n\tThe current and pending input regions of the wl_surface are cleared,\n\tand wl_surface.set_input_region is ignored until the wl_surface is no\n\tlonger used as the cursor. When the use as a cursor ends, the current\n\tand pending input regions become undefined, and the wl_surface is\n\tunmapped.\n\n\tThis request gives the surface the role of a wp_tablet_tool cursor. A\n\tsurface may only ever be used as the cursor surface for one\n\twp_tablet_tool. If the surface already has another role or has\n\tpreviously been used as cursor surface for a different tool, a\n\tprotocol error is raised.","summary":"set the tablet tool's surface"},"args":[{"type":"arg","name":"serial","argType":"uint","summary":"serial of the proximity_in event"},{"type":"arg","name":"surface","argType":"object","interface":"wl_surface","allowNull":"true"},{"type":"arg","name":"hotspot_x","argType":"int","summary":"surface-local x coordinate"},{"type":"arg","name":"hotspot_y","argType":"int","summary":"surface-local y coordinate"}]},{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"This destroys the client's resource for this tool object.","summary":"destroy the tool object"},"args":[]}],"events":[{"type":"event","name":"type","description":{"type":"description","text":"The tool type is the high-level type of the tool and usually decides\n\tthe interaction expected from this tool.\n\n\tThis event is sent in the initial burst of events before the\n\twp_tablet_tool.done event.","summary":"tool type"},"args":[{"type":"arg","name":"tool_type","argType":"uint","summary":"the physical tool type","enum":"type"}]},{"type":"event","name":"hardware_serial","description":{"type":"description","text":"If the physical tool can be identified by a unique 64-bit serial\n\tnumber, this event notifies the client of this serial number.\n\n\tIf multiple tablets are available in the same seat and the tool is\n\tuniquely identifiable by the serial number, that tool may move\n\tbetween tablets.\n\n\tOtherwise, if the tool has no serial number and this event is\n\tmissing, the tool is tied to the tablet it first comes into\n\tproximity with. Even if the physical tool is used on multiple\n\ttablets, separate wp_tablet_tool objects will be created, one per\n\ttablet.\n\n\tThis event is sent in the initial burst of events before the\n\twp_tablet_tool.done event.","summary":"unique hardware serial number of the tool"},"args":[{"type":"arg","name":"hardware_serial_hi","argType":"uint","summary":"the unique serial number of the tool, most significant bits"},{"type":"arg","name":"hardware_serial_lo","argType":"uint","summary":"the unique serial number of the tool, least significant bits"}]},{"type":"event","name":"hardware_id_wacom","description":{"type":"description","text":"This event notifies the client of a hardware id available on this tool.\n\n\tThe hardware id is a device-specific 64-bit id that provides extra\n\tinformation about the tool in use, beyond the wl_tool.type\n\tenumeration. The format of the id is specific to tablets made by\n\tWacom Inc. For example, the hardware id of a Wacom Grip\n\tPen (a stylus) is 0x802.\n\n\tThis event is sent in the initial burst of events before the\n\twp_tablet_tool.done event.","summary":"hardware id notification in Wacom's format"},"args":[{"type":"arg","name":"hardware_id_hi","argType":"uint","summary":"the hardware id, most significant bits"},{"type":"arg","name":"hardware_id_lo","argType":"uint","summary":"the hardware id, least significant bits"}]},{"type":"event","name":"capability","description":{"type":"description","text":"This event notifies the client of any capabilities of this tool,\n\tbeyond the main set of x/y axes and tip up/down detection.\n\n\tOne event is sent for each extra capability available on this tool.\n\n\tThis event is sent in the initial burst of events before the\n\twp_tablet_tool.done event.","summary":"tool capability notification"},"args":[{"type":"arg","name":"capability","argType":"uint","summary":"the capability","enum":"capability"}]},{"type":"event","name":"done","description":{"type":"description","text":"This event signals the end of the initial burst of descriptive\n\tevents. A client may consider the static description of the tool to\n\tbe complete and finalize initialization of the tool.","summary":"tool description events sequence complete"},"args":[]},{"type":"event","name":"removed","description":{"type":"description","text":"This event is sent when the tool is removed from the system and will\n\tsend no further events. Should the physical tool come back into\n\tproximity later, a new wp_tablet_tool object will be created.\n\n\tIt is compositor-dependent when a tool is removed. A compositor may\n\tremove a tool on proximity out, tablet removal or any other reason.\n\tA compositor may also keep a tool alive until shutdown.\n\n\tIf the tool is currently in proximity, a proximity_out event will be\n\tsent before the removed event. See wp_tablet_tool.proximity_out for\n\tthe handling of any buttons logically down.\n\n\tWhen this event is received, the client must wp_tablet_tool.destroy\n\tthe object.","summary":"tool removed"},"args":[]},{"type":"event","name":"proximity_in","description":{"type":"description","text":"Notification that this tool is focused on a certain surface.\n\n\tThis event can be received when the tool has moved from one surface to\n\tanother, or when the tool has come back into proximity above the\n\tsurface.\n\n\tIf any button is logically down when the tool comes into proximity,\n\tthe respective button event is sent after the proximity_in event but\n\twithin the same frame as the proximity_in event.","summary":"proximity in event"},"args":[{"type":"arg","name":"serial","argType":"uint"},{"type":"arg","name":"tablet","argType":"object","summary":"The tablet the tool is in proximity of","interface":"zwp_tablet_v2"},{"type":"arg","name":"surface","argType":"object","summary":"The current surface the tablet tool is over","interface":"wl_surface"}]},{"type":"event","name":"proximity_out","description":{"type":"description","text":"Notification that this tool has either left proximity, or is no\n\tlonger focused on a certain surface.\n\n\tWhen the tablet tool leaves proximity of the tablet, button release\n\tevents are sent for each button that was held down at the time of\n\tleaving proximity. These events are sent before the proximity_out\n\tevent but within the same wp_tablet.frame.\n\n\tIf the tool stays within proximity of the tablet, but the focus\n\tchanges from one surface to another, a button release event may not\n\tbe sent until the button is actually released or the tool leaves the\n\tproximity of the tablet.","summary":"proximity out event"},"args":[]},{"type":"event","name":"down","description":{"type":"description","text":"Sent whenever the tablet tool comes in contact with the surface of the\n\ttablet.\n\n\tIf the tool is already in contact with the tablet when entering the\n\tinput region, the client owning said region will receive a\n\twp_tablet.proximity_in event, followed by a wp_tablet.down\n\tevent and a wp_tablet.frame event.\n\n\tNote that this event describes logical contact, not physical\n\tcontact. On some devices, a compositor may not consider a tool in\n\tlogical contact until a minimum physical pressure threshold is\n\texceeded.","summary":"tablet tool is making contact"},"args":[{"type":"arg","name":"serial","argType":"uint"}]},{"type":"event","name":"up","description":{"type":"description","text":"Sent whenever the tablet tool stops making contact with the surface of\n\tthe tablet, or when the tablet tool moves out of the input region\n\tand the compositor grab (if any) is dismissed.\n\n\tIf the tablet tool moves out of the input region while in contact\n\twith the surface of the tablet and the compositor does not have an\n\tongoing grab on the surface, the client owning said region will\n\treceive a wp_tablet.up event, followed by a wp_tablet.proximity_out\n\tevent and a wp_tablet.frame event. If the compositor has an ongoing\n\tgrab on this device, this event sequence is sent whenever the grab\n\tis dismissed in the future.\n\n\tNote that this event describes logical contact, not physical\n\tcontact. On some devices, a compositor may not consider a tool out\n\tof logical contact until physical pressure falls below a specific\n\tthreshold.","summary":"tablet tool is no longer making contact"},"args":[]},{"type":"event","name":"motion","description":{"type":"description","text":"Sent whenever a tablet tool moves.","summary":"motion event"},"args":[{"type":"arg","name":"x","argType":"fixed","summary":"surface-local x coordinate"},{"type":"arg","name":"y","argType":"fixed","summary":"surface-local y coordinate"}]},{"type":"event","name":"pressure","description":{"type":"description","text":"Sent whenever the pressure axis on a tool changes. The value of this\n\tevent is normalized to a value between 0 and 65535.\n\n\tNote that pressure may be nonzero even when a tool is not in logical\n\tcontact. See the down and up events for more details.","summary":"pressure change event"},"args":[{"type":"arg","name":"pressure","argType":"uint","summary":"The current pressure value"}]},{"type":"event","name":"distance","description":{"type":"description","text":"Sent whenever the distance axis on a tool changes. The value of this\n\tevent is normalized to a value between 0 and 65535.\n\n\tNote that distance may be nonzero even when a tool is not in logical\n\tcontact. See the down and up events for more details.","summary":"distance change event"},"args":[{"type":"arg","name":"distance","argType":"uint","summary":"The current distance value"}]},{"type":"event","name":"tilt","description":{"type":"description","text":"Sent whenever one or both of the tilt axes on a tool change. Each tilt\n\tvalue is in degrees, relative to the z-axis of the tablet.\n\tThe angle is positive when the top of a tool tilts along the\n\tpositive x or y axis.","summary":"tilt change event"},"args":[{"type":"arg","name":"tilt_x","argType":"fixed","summary":"The current value of the X tilt axis"},{"type":"arg","name":"tilt_y","argType":"fixed","summary":"The current value of the Y tilt axis"}]},{"type":"event","name":"rotation","description":{"type":"description","text":"Sent whenever the z-rotation axis on the tool changes. The\n\trotation value is in degrees clockwise from the tool's\n\tlogical neutral position.","summary":"z-rotation change event"},"args":[{"type":"arg","name":"degrees","argType":"fixed","summary":"The current rotation of the Z axis"}]},{"type":"event","name":"slider","description":{"type":"description","text":"Sent whenever the slider position on the tool changes. The\n\tvalue is normalized between -65535 and 65535, with 0 as the logical\n\tneutral position of the slider.\n\n\tThe slider is available on e.g. the Wacom Airbrush tool.","summary":"Slider position change event"},"args":[{"type":"arg","name":"position","argType":"int","summary":"The current position of slider"}]},{"type":"event","name":"wheel","description":{"type":"description","text":"Sent whenever the wheel on the tool emits an event. This event\n\tcontains two values for the same axis change. The degrees value is\n\tin the same orientation as the wl_pointer.vertical_scroll axis. The\n\tclicks value is in discrete logical clicks of the mouse wheel. This\n\tvalue may be zero if the movement of the wheel was less\n\tthan one logical click.\n\n\tClients should choose either value and avoid mixing degrees and\n\tclicks. The compositor may accumulate values smaller than a logical\n\tclick and emulate click events when a certain threshold is met.\n\tThus, wl_tablet_tool.wheel events with non-zero clicks values may\n\thave different degrees values.","summary":"Wheel delta event"},"args":[{"type":"arg","name":"degrees","argType":"fixed","summary":"The wheel delta in degrees"},{"type":"arg","name":"clicks","argType":"int","summary":"The wheel delta in discrete clicks"}]},{"type":"event","name":"button","description":{"type":"description","text":"Sent whenever a button on the tool is pressed or released.\n\n\tIf a button is held down when the tool moves in or out of proximity,\n\tbutton events are generated by the compositor. See\n\twp_tablet_tool.proximity_in and wp_tablet_tool.proximity_out for\n\tdetails.","summary":"button event"},"args":[{"type":"arg","name":"serial","argType":"uint"},{"type":"arg","name":"button","argType":"uint","summary":"The button whose state has changed"},{"type":"arg","name":"state","argType":"uint","summary":"Whether the button was pressed or released","enum":"button_state"}]},{"type":"event","name":"frame","description":{"type":"description","text":"Marks the end of a series of axis and/or button updates from the\n\ttablet. The Wayland protocol requires axis updates to be sent\n\tsequentially, however all events within a frame should be considered\n\tone hardware event.","summary":"frame event"},"args":[{"type":"arg","name":"time","argType":"uint","summary":"The time of the event with millisecond granularity"}]}],"enums":[{"type":"enum","name":"type","bitfield":false,"description":{"type":"description","text":"Describes the physical type of a tool. The physical type of a tool\n\tgenerally defines its base usage.\n\n\tThe mouse tool represents a mouse-shaped tool that is not a relative\n\tdevice but bound to the tablet's surface, providing absolute\n\tcoordinates.\n\n\tThe lens tool is a mouse-shaped tool with an attached lens to\n\tprovide precision focus.","summary":"a physical tool type"},"entries":[{"type":"entry","name":"pen","value":"0x140","summary":"Pen"},{"type":"entry","name":"eraser","value":"0x141","summary":"Eraser"},{"type":"entry","name":"brush","value":"0x142","summary":"Brush"},{"type":"entry","name":"pencil","value":"0x143","summary":"Pencil"},{"type":"entry","name":"airbrush","value":"0x144","summary":"Airbrush"},{"type":"entry","name":"finger","value":"0x145","summary":"Finger"},{"type":"entry","name":"mouse","value":"0x146","summary":"Mouse"},{"type":"entry","name":"lens","value":"0x147","summary":"Lens"}]},{"type":"enum","name":"capability","bitfield":false,"description":{"type":"description","text":"Describes extra capabilities on a tablet.\n\n\tAny tool must provide x and y values, extra axes are\n\tdevice-specific.","summary":"capability flags for a tool"},"entries":[{"type":"entry","name":"tilt","value":"1","summary":"Tilt axes"},{"type":"entry","name":"pressure","value":"2","summary":"Pressure axis"},{"type":"entry","name":"distance","value":"3","summary":"Distance axis"},{"type":"entry","name":"rotation","value":"4","summary":"Z-rotation axis"},{"type":"entry","name":"slider","value":"5","summary":"Slider axis"},{"type":"entry","name":"wheel","value":"6","summary":"Wheel axis"}]},{"type":"enum","name":"button_state","bitfield":false,"description":{"type":"description","text":"Describes the physical state of a button that produced the button event.","summary":"physical button state"},"entries":[{"type":"entry","name":"released","value":"0","summary":"button is not pressed"},{"type":"entry","name":"pressed","value":"1","summary":"button is pressed"}]},{"type":"enum","name":"error","bitfield":false,"entries":[{"type":"entry","name":"role","value":"0","summary":"given wl_surface has another role"}]}]},{"type":"interface","name":"zwp_tablet_v2","version":"1","description":{"type":"description","text":"The wp_tablet interface represents one graphics tablet device. The\n      tablet interface itself does not generate events; all events are\n      generated by wp_tablet_tool objects when in proximity above a tablet.\n\n      A tablet has a number of static characteristics, e.g. device name and\n      pid/vid. These capabilities are sent in an event sequence after the\n      wp_tablet_seat.tablet_added event. This initial event sequence is\n      terminated by a wp_tablet.done event.","summary":"graphics tablet device"},"requests":[{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"This destroys the client's resource for this tablet object.","summary":"destroy the tablet object"},"args":[]}],"events":[{"type":"event","name":"name","description":{"type":"description","text":"A descriptive name for the tablet device.\n\n\tIf the device has no descriptive name, this event is not sent.\n\n\tThis event is sent in the initial burst of events before the\n        wp_tablet.done event.","summary":"tablet device name"},"args":[{"type":"arg","name":"name","argType":"string","summary":"the device name"}]},{"type":"event","name":"id","description":{"type":"description","text":"The USB vendor and product IDs for the tablet device.\n\n\tIf the device has no USB vendor/product ID, this event is not sent.\n\tThis can happen for virtual devices or non-USB devices, for instance.\n\n\tThis event is sent in the initial burst of events before the\n\twp_tablet.done event.","summary":"tablet device USB vendor/product id"},"args":[{"type":"arg","name":"vid","argType":"uint","summary":"USB vendor id"},{"type":"arg","name":"pid","argType":"uint","summary":"USB product id"}]},{"type":"event","name":"path","description":{"type":"description","text":"A system-specific device path that indicates which device is behind\n\tthis wp_tablet. This information may be used to gather additional\n\tinformation about the device, e.g. through libwacom.\n\n\tA device may have more than one device path. If so, multiple\n\twp_tablet.path events are sent. A device may be emulated and not\n\thave a device path, and in that case this event will not be sent.\n\n\tThe format of the path is unspecified, it may be a device node, a\n\tsysfs path, or some other identifier. It is up to the client to\n\tidentify the string provided.\n\n\tThis event is sent in the initial burst of events before the\n\twp_tablet.done event.","summary":"path to the device"},"args":[{"type":"arg","name":"path","argType":"string","summary":"path to local device"}]},{"type":"event","name":"done","description":{"type":"description","text":"This event is sent immediately to signal the end of the initial\n\tburst of descriptive events. A client may consider the static\n\tdescription of the tablet to be complete and finalize initialization\n\tof the tablet.","summary":"tablet description events sequence complete"},"args":[]},{"type":"event","name":"removed","description":{"type":"description","text":"Sent when the tablet has been removed from the system. When a tablet\n\tis removed, some tools may be removed.\n\n\tWhen this event is received, the client must wp_tablet.destroy\n\tthe object.","summary":"tablet removed event"},"args":[]}],"enums":[]},{"type":"interface","name":"zwp_tablet_pad_ring_v2","version":"1","description":{"type":"description","text":"A circular interaction area, such as the touch ring on the Wacom Intuos\n      Pro series tablets.\n\n      Events on a ring are logically grouped by the wl_tablet_pad_ring.frame\n      event.","summary":"pad ring"},"requests":[{"type":"request","name":"set_feedback","description":{"type":"description","text":"Request that the compositor use the provided feedback string\n\tassociated with this ring. This request should be issued immediately\n\tafter a wp_tablet_pad_group.mode_switch event from the corresponding\n\tgroup is received, or whenever the ring is mapped to a different\n\taction. See wp_tablet_pad_group.mode_switch for more details.\n\n\tClients are encouraged to provide context-aware descriptions for\n\tthe actions associated with the ring; compositors may use this\n\tinformation to offer visual feedback about the button layout\n\t(eg. on-screen displays).\n\n\tThe provided string 'description' is a UTF-8 encoded string to be\n\tassociated with this ring, and is considered user-visible; general\n\tinternationalization rules apply.\n\n\tThe serial argument will be that of the last\n\twp_tablet_pad_group.mode_switch event received for the group of this\n\tring. Requests providing other serials than the most recent one will be\n\tignored.","summary":"set compositor feedback"},"args":[{"type":"arg","name":"description","argType":"string","summary":"ring description"},{"type":"arg","name":"serial","argType":"uint","summary":"serial of the mode switch event"}]},{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"This destroys the client's resource for this ring object.","summary":"destroy the ring object"},"args":[]}],"events":[{"type":"event","name":"source","description":{"type":"description","text":"Source information for ring events.\n\n\tThis event does not occur on its own. It is sent before a\n\twp_tablet_pad_ring.frame event and carries the source information\n\tfor all events within that frame.\n\n\tThe source specifies how this event was generated. If the source is\n\twp_tablet_pad_ring.source.finger, a wp_tablet_pad_ring.stop event\n\twill be sent when the user lifts the finger off the device.\n\n\tThis event is optional. If the source is unknown for an interaction,\n\tno event is sent.","summary":"ring event source"},"args":[{"type":"arg","name":"source","argType":"uint","summary":"the event source","enum":"source"}]},{"type":"event","name":"angle","description":{"type":"description","text":"Sent whenever the angle on a ring changes.\n\n\tThe angle is provided in degrees clockwise from the logical\n\tnorth of the ring in the pad's current rotation.","summary":"angle changed"},"args":[{"type":"arg","name":"degrees","argType":"fixed","summary":"the current angle in degrees"}]},{"type":"event","name":"stop","description":{"type":"description","text":"Stop notification for ring events.\n\n\tFor some wp_tablet_pad_ring.source types, a wp_tablet_pad_ring.stop\n\tevent is sent to notify a client that the interaction with the ring\n\thas terminated. This enables the client to implement kinetic scrolling.\n\tSee the wp_tablet_pad_ring.source documentation for information on\n\twhen this event may be generated.\n\n\tAny wp_tablet_pad_ring.angle events with the same source after this\n\tevent should be considered as the start of a new interaction.","summary":"interaction stopped"},"args":[]},{"type":"event","name":"frame","description":{"type":"description","text":"Indicates the end of a set of ring events that logically belong\n\ttogether. A client is expected to accumulate the data in all events\n\twithin the frame before proceeding.\n\n\tAll wp_tablet_pad_ring events before a wp_tablet_pad_ring.frame event belong\n\tlogically together. For example, on termination of a finger interaction\n\ton a ring the compositor will send a wp_tablet_pad_ring.source event,\n\ta wp_tablet_pad_ring.stop event and a wp_tablet_pad_ring.frame event.\n\n\tA wp_tablet_pad_ring.frame event is sent for every logical event\n\tgroup, even if the group only contains a single wp_tablet_pad_ring\n\tevent. Specifically, a client may get a sequence: angle, frame,\n\tangle, frame, etc.","summary":"end of a ring event sequence"},"args":[{"type":"arg","name":"time","argType":"uint","summary":"timestamp with millisecond granularity"}]}],"enums":[{"type":"enum","name":"source","bitfield":false,"description":{"type":"description","text":"Describes the source types for ring events. This indicates to the\n\tclient how a ring event was physically generated; a client may\n\tadjust the user interface accordingly. For example, events\n\tfrom a \"finger\" source may trigger kinetic scrolling.","summary":"ring axis source"},"entries":[{"type":"entry","name":"finger","value":"1","summary":"finger"}]}]},{"type":"interface","name":"zwp_tablet_pad_strip_v2","version":"1","description":{"type":"description","text":"A linear interaction area, such as the strips found in Wacom Cintiq\n      models.\n\n      Events on a strip are logically grouped by the wl_tablet_pad_strip.frame\n      event.","summary":"pad strip"},"requests":[{"type":"request","name":"set_feedback","description":{"type":"description","text":"Requests the compositor to use the provided feedback string\n\tassociated with this strip. This request should be issued immediately\n\tafter a wp_tablet_pad_group.mode_switch event from the corresponding\n\tgroup is received, or whenever the strip is mapped to a different\n\taction. See wp_tablet_pad_group.mode_switch for more details.\n\n\tClients are encouraged to provide context-aware descriptions for\n\tthe actions associated with the strip, and compositors may use this\n\tinformation to offer visual feedback about the button layout\n\t(eg. on-screen displays).\n\n\tThe provided string 'description' is a UTF-8 encoded string to be\n\tassociated with this ring, and is considered user-visible; general\n\tinternationalization rules apply.\n\n\tThe serial argument will be that of the last\n\twp_tablet_pad_group.mode_switch event received for the group of this\n\tstrip. Requests providing other serials than the most recent one will be\n\tignored.","summary":"set compositor feedback"},"args":[{"type":"arg","name":"description","argType":"string","summary":"strip description"},{"type":"arg","name":"serial","argType":"uint","summary":"serial of the mode switch event"}]},{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"This destroys the client's resource for this strip object.","summary":"destroy the strip object"},"args":[]}],"events":[{"type":"event","name":"source","description":{"type":"description","text":"Source information for strip events.\n\n\tThis event does not occur on its own. It is sent before a\n\twp_tablet_pad_strip.frame event and carries the source information\n\tfor all events within that frame.\n\n\tThe source specifies how this event was generated. If the source is\n\twp_tablet_pad_strip.source.finger, a wp_tablet_pad_strip.stop event\n\twill be sent when the user lifts their finger off the device.\n\n\tThis event is optional. If the source is unknown for an interaction,\n\tno event is sent.","summary":"strip event source"},"args":[{"type":"arg","name":"source","argType":"uint","summary":"the event source","enum":"source"}]},{"type":"event","name":"position","description":{"type":"description","text":"Sent whenever the position on a strip changes.\n\n\tThe position is normalized to a range of [0, 65535], the 0-value\n\trepresents the top-most and/or left-most position of the strip in\n\tthe pad's current rotation.","summary":"position changed"},"args":[{"type":"arg","name":"position","argType":"uint","summary":"the current position"}]},{"type":"event","name":"stop","description":{"type":"description","text":"Stop notification for strip events.\n\n\tFor some wp_tablet_pad_strip.source types, a wp_tablet_pad_strip.stop\n\tevent is sent to notify a client that the interaction with the strip\n\thas terminated. This enables the client to implement kinetic\n\tscrolling. See the wp_tablet_pad_strip.source documentation for\n\tinformation on when this event may be generated.\n\n\tAny wp_tablet_pad_strip.position events with the same source after this\n\tevent should be considered as the start of a new interaction.","summary":"interaction stopped"},"args":[]},{"type":"event","name":"frame","description":{"type":"description","text":"Indicates the end of a set of events that represent one logical\n\thardware strip event. A client is expected to accumulate the data\n\tin all events within the frame before proceeding.\n\n\tAll wp_tablet_pad_strip events before a wp_tablet_pad_strip.frame event belong\n\tlogically together. For example, on termination of a finger interaction\n\ton a strip the compositor will send a wp_tablet_pad_strip.source event,\n\ta wp_tablet_pad_strip.stop event and a wp_tablet_pad_strip.frame\n\tevent.\n\n\tA wp_tablet_pad_strip.frame event is sent for every logical event\n\tgroup, even if the group only contains a single wp_tablet_pad_strip\n\tevent. Specifically, a client may get a sequence: position, frame,\n\tposition, frame, etc.","summary":"end of a strip event sequence"},"args":[{"type":"arg","name":"time","argType":"uint","summary":"timestamp with millisecond granularity"}]}],"enums":[{"type":"enum","name":"source","bitfield":false,"description":{"type":"description","text":"Describes the source types for strip events. This indicates to the\n\tclient how a strip event was physically generated; a client may\n\tadjust the user interface accordingly. For example, events\n\tfrom a \"finger\" source may trigger kinetic scrolling.","summary":"strip axis source"},"entries":[{"type":"entry","name":"finger","value":"1","summary":"finger"}]}]},{"type":"interface","name":"zwp_tablet_pad_group_v2","version":"1","description":{"type":"description","text":"A pad group describes a distinct (sub)set of buttons, rings and strips\n      present in the tablet. The criteria of this grouping is usually positional,\n      eg. if a tablet has buttons on the left and right side, 2 groups will be\n      presented. The physical arrangement of groups is undisclosed and may\n      change on the fly.\n\n      Pad groups will announce their features during pad initialization. Between\n      the corresponding wp_tablet_pad.group event and wp_tablet_pad_group.done, the\n      pad group will announce the buttons, rings and strips contained in it,\n      plus the number of supported modes.\n\n      Modes are a mechanism to allow multiple groups of actions for every element\n      in the pad group. The number of groups and available modes in each is\n      persistent across device plugs. The current mode is user-switchable, it\n      will be announced through the wp_tablet_pad_group.mode_switch event both\n      whenever it is switched, and after wp_tablet_pad.enter.\n\n      The current mode logically applies to all elements in the pad group,\n      although it is at clients' discretion whether to actually perform different\n      actions, and/or issue the respective .set_feedback requests to notify the\n      compositor. See the wp_tablet_pad_group.mode_switch event for more details.","summary":"a set of buttons, rings and strips"},"requests":[{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"Destroy the wp_tablet_pad_group object. Objects created from this object\n\tare unaffected and should be destroyed separately.","summary":"destroy the pad object"},"args":[]}],"events":[{"type":"event","name":"buttons","description":{"type":"description","text":"Sent on wp_tablet_pad_group initialization to announce the available\n\tbuttons in the group. Button indices start at 0, a button may only be\n\tin one group at a time.\n\n\tThis event is first sent in the initial burst of events before the\n\twp_tablet_pad_group.done event.\n\n\tSome buttons are reserved by the compositor. These buttons may not be\n\tassigned to any wp_tablet_pad_group. Compositors may broadcast this\n\tevent in the case of changes to the mapping of these reserved buttons.\n\tIf the compositor happens to reserve all buttons in a group, this event\n\twill be sent with an empty array.","summary":"buttons announced"},"args":[{"type":"arg","name":"buttons","argType":"array","summary":"buttons in this group"}]},{"type":"event","name":"ring","description":{"type":"description","text":"Sent on wp_tablet_pad_group initialization to announce available rings.\n\tOne event is sent for each ring available on this pad group.\n\n\tThis event is sent in the initial burst of events before the\n\twp_tablet_pad_group.done event.","summary":"ring announced"},"args":[{"type":"arg","name":"ring","argType":"new_id","interface":"zwp_tablet_pad_ring_v2"}]},{"type":"event","name":"strip","description":{"type":"description","text":"Sent on wp_tablet_pad initialization to announce available strips.\n\tOne event is sent for each strip available on this pad group.\n\n\tThis event is sent in the initial burst of events before the\n\twp_tablet_pad_group.done event.","summary":"strip announced"},"args":[{"type":"arg","name":"strip","argType":"new_id","interface":"zwp_tablet_pad_strip_v2"}]},{"type":"event","name":"modes","description":{"type":"description","text":"Sent on wp_tablet_pad_group initialization to announce that the pad\n\tgroup may switch between modes. A client may use a mode to store a\n\tspecific configuration for buttons, rings and strips and use the\n\twl_tablet_pad_group.mode_switch event to toggle between these\n\tconfigurations. Mode indices start at 0.\n\n\tSwitching modes is compositor-dependent. See the\n\twp_tablet_pad_group.mode_switch event for more details.\n\n\tThis event is sent in the initial burst of events before the\n\twp_tablet_pad_group.done event. This event is only sent when more than\n\tmore than one mode is available.","summary":"mode-switch ability announced"},"args":[{"type":"arg","name":"modes","argType":"uint","summary":"the number of modes"}]},{"type":"event","name":"done","description":{"type":"description","text":"This event is sent immediately to signal the end of the initial\n\tburst of descriptive events. A client may consider the static\n\tdescription of the tablet to be complete and finalize initialization\n\tof the tablet group.","summary":"tablet group description events sequence complete"},"args":[]},{"type":"event","name":"mode_switch","description":{"type":"description","text":"Notification that the mode was switched.\n\n\tA mode applies to all buttons, rings and strips in a group\n\tsimultaneously, but a client is not required to assign different actions\n\tfor each mode. For example, a client may have mode-specific button\n\tmappings but map the ring to vertical scrolling in all modes. Mode\n\tindices start at 0.\n\n\tSwitching modes is compositor-dependent. The compositor may provide\n\tvisual cues to the client about the mode, e.g. by toggling LEDs on\n\tthe tablet device. Mode-switching may be software-controlled or\n\tcontrolled by one or more physical buttons. For example, on a Wacom\n\tIntuos Pro, the button inside the ring may be assigned to switch\n\tbetween modes.\n\n\tThe compositor will also send this event after wp_tablet_pad.enter on\n\teach group in order to notify of the current mode. Groups that only\n\tfeature one mode will use mode=0 when emitting this event.\n\n\tIf a button action in the new mode differs from the action in the\n\tprevious mode, the client should immediately issue a\n\twp_tablet_pad.set_feedback request for each changed button.\n\n\tIf a ring or strip action in the new mode differs from the action\n\tin the previous mode, the client should immediately issue a\n\twp_tablet_ring.set_feedback or wp_tablet_strip.set_feedback request\n\tfor each changed ring or strip.","summary":"mode switch event"},"args":[{"type":"arg","name":"time","argType":"uint","summary":"the time of the event with millisecond granularity"},{"type":"arg","name":"serial","argType":"uint"},{"type":"arg","name":"mode","argType":"uint","summary":"the new mode of the pad"}]}],"enums":[]},{"type":"interface","name":"zwp_tablet_pad_v2","version":"1","description":{"type":"description","text":"A pad device is a set of buttons, rings and strips\n      usually physically present on the tablet device itself. Some\n      exceptions exist where the pad device is physically detached, e.g. the\n      Wacom ExpressKey Remote.\n\n      Pad devices have no axes that control the cursor and are generally\n      auxiliary devices to the tool devices used on the tablet surface.\n\n      A pad device has a number of static characteristics, e.g. the number\n      of rings. These capabilities are sent in an event sequence after the\n      wp_tablet_seat.pad_added event before any actual events from this pad.\n      This initial event sequence is terminated by a wp_tablet_pad.done\n      event.\n\n      All pad features (buttons, rings and strips) are logically divided into\n      groups and all pads have at least one group. The available groups are\n      notified through the wp_tablet_pad.group event; the compositor will\n      emit one event per group before emitting wp_tablet_pad.done.\n\n      Groups may have multiple modes. Modes allow clients to map multiple\n      actions to a single pad feature. Only one mode can be active per group,\n      although different groups may have different active modes.","summary":"a set of buttons, rings and strips"},"requests":[{"type":"request","name":"set_feedback","description":{"type":"description","text":"Requests the compositor to use the provided feedback string\n\tassociated with this button. This request should be issued immediately\n\tafter a wp_tablet_pad_group.mode_switch event from the corresponding\n\tgroup is received, or whenever a button is mapped to a different\n\taction. See wp_tablet_pad_group.mode_switch for more details.\n\n\tClients are encouraged to provide context-aware descriptions for\n\tthe actions associated with each button, and compositors may use\n\tthis information to offer visual feedback on the button layout\n\t(e.g. on-screen displays).\n\n\tButton indices start at 0. Setting the feedback string on a button\n\tthat is reserved by the compositor (i.e. not belonging to any\n\twp_tablet_pad_group) does not generate an error but the compositor\n\tis free to ignore the request.\n\n\tThe provided string 'description' is a UTF-8 encoded string to be\n\tassociated with this ring, and is considered user-visible; general\n\tinternationalization rules apply.\n\n\tThe serial argument will be that of the last\n\twp_tablet_pad_group.mode_switch event received for the group of this\n\tbutton. Requests providing other serials than the most recent one will\n\tbe ignored.","summary":"set compositor feedback"},"args":[{"type":"arg","name":"button","argType":"uint","summary":"button index"},{"type":"arg","name":"description","argType":"string","summary":"button description"},{"type":"arg","name":"serial","argType":"uint","summary":"serial of the mode switch event"}]},{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"Destroy the wp_tablet_pad object. Objects created from this object\n\tare unaffected and should be destroyed separately.","summary":"destroy the pad object"},"args":[]}],"events":[{"type":"event","name":"group","description":{"type":"description","text":"Sent on wp_tablet_pad initialization to announce available groups.\n\tOne event is sent for each pad group available.\n\n\tThis event is sent in the initial burst of events before the\n\twp_tablet_pad.done event. At least one group will be announced.","summary":"group announced"},"args":[{"type":"arg","name":"pad_group","argType":"new_id","interface":"zwp_tablet_pad_group_v2"}]},{"type":"event","name":"path","description":{"type":"description","text":"A system-specific device path that indicates which device is behind\n\tthis wp_tablet_pad. This information may be used to gather additional\n\tinformation about the device, e.g. through libwacom.\n\n\tThe format of the path is unspecified, it may be a device node, a\n\tsysfs path, or some other identifier. It is up to the client to\n\tidentify the string provided.\n\n\tThis event is sent in the initial burst of events before the\n\twp_tablet_pad.done event.","summary":"path to the device"},"args":[{"type":"arg","name":"path","argType":"string","summary":"path to local device"}]},{"type":"event","name":"buttons","description":{"type":"description","text":"Sent on wp_tablet_pad initialization to announce the available\n\tbuttons.\n\n\tThis event is sent in the initial burst of events before the\n\twp_tablet_pad.done event. This event is only sent when at least one\n\tbutton is available.","summary":"buttons announced"},"args":[{"type":"arg","name":"buttons","argType":"uint","summary":"the number of buttons"}]},{"type":"event","name":"done","description":{"type":"description","text":"This event signals the end of the initial burst of descriptive\n\tevents. A client may consider the static description of the pad to\n\tbe complete and finalize initialization of the pad.","summary":"pad description event sequence complete"},"args":[]},{"type":"event","name":"button","description":{"type":"description","text":"Sent whenever the physical state of a button changes.","summary":"physical button state"},"args":[{"type":"arg","name":"time","argType":"uint","summary":"the time of the event with millisecond granularity"},{"type":"arg","name":"button","argType":"uint","summary":"the index of the button that changed state"},{"type":"arg","name":"state","argType":"uint","enum":"button_state"}]},{"type":"event","name":"enter","description":{"type":"description","text":"Notification that this pad is focused on the specified surface.","summary":"enter event"},"args":[{"type":"arg","name":"serial","argType":"uint","summary":"serial number of the enter event"},{"type":"arg","name":"tablet","argType":"object","summary":"the tablet the pad is attached to","interface":"zwp_tablet_v2"},{"type":"arg","name":"surface","argType":"object","summary":"surface the pad is focused on","interface":"wl_surface"}]},{"type":"event","name":"leave","description":{"type":"description","text":"Notification that this pad is no longer focused on the specified\n\tsurface.","summary":"leave event"},"args":[{"type":"arg","name":"serial","argType":"uint","summary":"serial number of the leave event"},{"type":"arg","name":"surface","argType":"object","summary":"surface the pad is no longer focused on","interface":"wl_surface"}]},{"type":"event","name":"removed","description":{"type":"description","text":"Sent when the pad has been removed from the system. When a tablet\n\tis removed its pad(s) will be removed too.\n\n\tWhen this event is received, the client must destroy all rings, strips\n\tand groups that were offered by this pad, and issue wp_tablet_pad.destroy\n\tthe pad itself.","summary":"pad removed event"},"args":[]}],"enums":[{"type":"enum","name":"button_state","bitfield":false,"description":{"type":"description","text":"Describes the physical state of a button that caused the button\n\tevent.","summary":"physical button state"},"entries":[{"type":"entry","name":"released","value":"0","summary":"the button is not pressed"},{"type":"entry","name":"pressed","value":"1","summary":"the button is pressed"}]}]}]}