{"type":"protocol","name":"xdg_output_unstable_v1","copyright":{"type":"copyright","text":"Copyright © 2017 Red Hat Inc.\n\n    Permission is hereby granted, free of charge, to any person obtaining a\n    copy of this software and associated documentation files (the \"Software\"),\n    to deal in the Software without restriction, including without limitation\n    the rights to use, copy, modify, merge, publish, distribute, sublicense,\n    and/or sell copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice (including the next\n    paragraph) shall be included in all copies or substantial portions of the\n    Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n    DEALINGS IN THE SOFTWARE."},"description":{"type":"description","text":"This protocol aims at describing outputs in a way which is more in line\n    with the concept of an output on desktop oriented systems.\n\n    Some information are more specific to the concept of an output for\n    a desktop oriented system and may not make sense in other applications,\n    such as IVI systems for example.\n\n    Typically, the global compositor space on a desktop system is made of\n    a contiguous or overlapping set of rectangular regions.\n\n    Some of the information provided in this protocol might be identical\n    to their counterparts already available from wl_output, in which case\n    the information provided by this protocol should be preferred to their\n    equivalent in wl_output. The goal is to move the desktop specific\n    concepts (such as output location within the global compositor space,\n    the connector name and types, etc.) out of the core wl_output protocol.\n\n    Warning! The protocol described in this file is experimental and\n    backward incompatible changes may be made. Backward compatible\n    changes may be added together with the corresponding interface\n    version bump.\n    Backward incompatible changes are done by bumping the version\n    number in the protocol and interface names and resetting the\n    interface version. Once the protocol is to be declared stable,\n    the 'z' prefix and the version number in the protocol and\n    interface names are removed and the interface version number is\n    reset.","summary":"Protocol to describe output regions"},"interfaces":[{"type":"interface","name":"zxdg_output_manager_v1","version":"3","description":{"type":"description","text":"A global factory interface for xdg_output objects.","summary":"manage xdg_output objects"},"requests":[{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"Using this request a client can tell the server that it is not\n\tgoing to use the xdg_output_manager object anymore.\n\n\tAny objects already created through this instance are not affected.","summary":"destroy the xdg_output_manager object"},"args":[]},{"type":"request","name":"get_xdg_output","description":{"type":"description","text":"This creates a new xdg_output object for the given wl_output.","summary":"create an xdg output from a wl_output"},"args":[{"type":"arg","name":"id","argType":"new_id","interface":"zxdg_output_v1"},{"type":"arg","name":"output","argType":"object","interface":"wl_output"}]}],"events":[],"enums":[]},{"type":"interface","name":"zxdg_output_v1","version":"3","description":{"type":"description","text":"An xdg_output describes part of the compositor geometry.\n\n      This typically corresponds to a monitor that displays part of the\n      compositor space.\n\n      For objects version 3 onwards, after all xdg_output properties have been\n      sent (when the object is created and when properties are updated), a\n      wl_output.done event is sent. This allows changes to the output\n      properties to be seen as atomic, even if they happen via multiple events.","summary":"compositor logical output region"},"requests":[{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"Using this request a client can tell the server that it is not\n\tgoing to use the xdg_output object anymore.","summary":"destroy the xdg_output object"},"args":[]}],"events":[{"type":"event","name":"logical_position","description":{"type":"description","text":"The position event describes the location of the wl_output within\n\tthe global compositor space.\n\n\tThe logical_position event is sent after creating an xdg_output\n\t(see xdg_output_manager.get_xdg_output) and whenever the location\n\tof the output changes within the global compositor space.","summary":"position of the output within the global compositor space"},"args":[{"type":"arg","name":"x","argType":"int","summary":"x position within the global compositor space"},{"type":"arg","name":"y","argType":"int","summary":"y position within the global compositor space"}]},{"type":"event","name":"logical_size","description":{"type":"description","text":"The logical_size event describes the size of the output in the\n\tglobal compositor space.\n\n\tFor example, a surface without any buffer scale, transformation\n\tnor rotation set, with the size matching the logical_size will\n\thave the same size as the corresponding output when displayed.\n\n\tMost regular Wayland clients should not pay attention to the\n\tlogical size and would rather rely on xdg_shell interfaces.\n\n\tSome clients such as Xwayland, however, need this to configure\n\ttheir surfaces in the global compositor space as the compositor\n\tmay apply a different scale from what is advertised by the output\n\tscaling property (to achieve fractional scaling, for example).\n\n\tFor example, for a wl_output mode 3840×2160 and a scale factor 2:\n\n\t- A compositor not scaling the surface buffers will advertise a\n\t  logical size of 3840×2160,\n\n\t- A compositor automatically scaling the surface buffers will\n\t  advertise a logical size of 1920×1080,\n\n\t- A compositor using a fractional scale of 1.5 will advertise a\n\t  logical size of 2560×1440.\n\n\tFor example, for a wl_output mode 1920×1080 and a 90 degree rotation,\n\tthe compositor will advertise a logical size of 1080x1920.\n\n\tThe logical_size event is sent after creating an xdg_output\n\t(see xdg_output_manager.get_xdg_output) and whenever the logical\n\tsize of the output changes, either as a result of a change in the\n\tapplied scale or because of a change in the corresponding output\n\tmode(see wl_output.mode) or transform (see wl_output.transform).","summary":"size of the output in the global compositor space"},"args":[{"type":"arg","name":"width","argType":"int","summary":"width in global compositor space"},{"type":"arg","name":"height","argType":"int","summary":"height in global compositor space"}]},{"type":"event","name":"done","description":{"type":"description","text":"This event is sent after all other properties of an xdg_output\n\thave been sent.\n\n\tThis allows changes to the xdg_output properties to be seen as\n\tatomic, even if they happen via multiple events.\n\n\tFor objects version 3 onwards, this event is deprecated. Compositors\n\tare not required to send it anymore and must send wl_output.done\n\tinstead.","summary":"all information about the output have been sent"},"args":[]},{"type":"event","name":"name","since":"2","description":{"type":"description","text":"Many compositors will assign names to their outputs, show them to the\n\tuser, allow them to be configured by name, etc. The client may wish to\n\tknow this name as well to offer the user similar behaviors.\n\n\tThe naming convention is compositor defined, but limited to\n\talphanumeric characters and dashes (-). Each name is unique among all\n\twl_output globals, but if a wl_output global is destroyed the same name\n\tmay be reused later. The names will also remain consistent across\n\tsessions with the same hardware and software configuration.\n\n\tExamples of names include 'HDMI-A-1', 'WL-1', 'X11-1', etc. However, do\n\tnot assume that the name is a reflection of an underlying DRM\n\tconnector, X11 connection, etc.\n\n\tThe name event is sent after creating an xdg_output (see\n\txdg_output_manager.get_xdg_output). This event is only sent once per\n\txdg_output, and the name does not change over the lifetime of the\n\twl_output global.","summary":"name of this output"},"args":[{"type":"arg","name":"name","argType":"string","summary":"output name"}]},{"type":"event","name":"description","since":"2","description":{"type":"description","text":"Many compositors can produce human-readable descriptions of their\n\toutputs.  The client may wish to know this description as well, to\n\tcommunicate the user for various purposes.\n\n\tThe description is a UTF-8 string with no convention defined for its\n\tcontents. Examples might include 'Foocorp 11\" Display' or 'Virtual X11\n\toutput via :1'.\n\n\tThe description event is sent after creating an xdg_output (see\n\txdg_output_manager.get_xdg_output) and whenever the description\n\tchanges. The description is optional, and may not be sent at all.\n\n\tFor objects of version 2 and lower, this event is only sent once per\n\txdg_output, and the description does not change over the lifetime of\n\tthe wl_output global.","summary":"human-readable description of this output"},"args":[{"type":"arg","name":"description","argType":"string","summary":"output description"}]}],"enums":[]}]}