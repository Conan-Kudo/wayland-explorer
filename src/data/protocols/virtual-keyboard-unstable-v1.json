{"type":"protocol","name":"virtual_keyboard_unstable_v1","copyright":{"type":"copyright","text":"Copyright © 2008-2011  Kristian Høgsberg\n\t\tCopyright © 2010-2013  Intel Corporation\n\t\tCopyright © 2012-2013  Collabora, Ltd.\n\t\tCopyright © 2018       Purism SPC\n\n\t\tPermission is hereby granted, free of charge, to any person obtaining a\n\t\tcopy of this software and associated documentation files (the \"Software\"),\n\t\tto deal in the Software without restriction, including without limitation\n\t\tthe rights to use, copy, modify, merge, publish, distribute, sublicense,\n\t\tand/or sell copies of the Software, and to permit persons to whom the\n\t\tSoftware is furnished to do so, subject to the following conditions:\n\n\t\tThe above copyright notice and this permission notice (including the next\n\t\tparagraph) shall be included in all copies or substantial portions of the\n\t\tSoftware.\n\n\t\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n\t\tTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\t\tFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\t\tDEALINGS IN THE SOFTWARE."},"interfaces":[{"type":"interface","name":"zwp_virtual_keyboard_v1","version":"1","description":{"type":"description","text":"The virtual keyboard provides an application with requests which emulate\n\t\t\tthe behaviour of a physical keyboard.\n\n\t\t\tThis interface can be used by clients on its own to provide raw input\n\t\t\tevents, or it can accompany the input method protocol.","summary":"virtual keyboard"},"requests":[{"type":"request","name":"keymap","description":{"type":"description","text":"Provide a file descriptor to the compositor which can be memory-mapped\n\t\t\t\tto provide a keyboard mapping description.","summary":"keyboard mapping"},"args":[{"type":"arg","name":"format","argType":"uint","summary":"keymap format","enum":"wl_keyboard.keymap_format"},{"type":"arg","name":"fd","argType":"fd","summary":"keymap file descriptor"},{"type":"arg","name":"size","argType":"uint","summary":"keymap size, in bytes"}]},{"type":"request","name":"key","description":{"type":"description","text":"A key was pressed or released.\n\n\t\t\t\tThe time argument is a timestamp with millisecond granularity, with an\n\t\t\t\tundefined base. All requests regarding a single object must share the\n\t\t\t\tsame clock.\n\n\t\t\t\tKeymap must be set before issuing this request.","summary":"key event"},"args":[{"type":"arg","name":"time","argType":"uint","summary":"timestamp with millisecond granularity"},{"type":"arg","name":"key","argType":"uint","summary":"key that produced the event"},{"type":"arg","name":"state","argType":"uint","summary":"physical state of the key","enum":"wl_keyboard.key_state"}]},{"type":"request","name":"modifiers","description":{"type":"description","text":"Notifies the compositor that the modifier and/or group state has\n\t\t\t\tchanged, and it should update state.\n\n\t\t\t\tKeymap must be set before issuing this request.","summary":"modifier and group state"},"args":[{"type":"arg","name":"mods_depressed","argType":"uint","summary":"depressed modifiers"},{"type":"arg","name":"mods_latched","argType":"uint","summary":"latched modifiers"},{"type":"arg","name":"mods_locked","argType":"uint","summary":"locked modifiers"},{"type":"arg","name":"group","argType":"uint","summary":"keyboard layout"}]},{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","summary":"destroy the virtual keyboard object"},"args":[]}],"events":[],"enums":[{"type":"enum","name":"error","bitfield":false,"entries":[{"type":"entry","name":"no_keymap","value":"0","summary":"No keymap was set"}]}]},{"type":"interface","name":"zwp_virtual_keyboard_manager_v1","version":"1","description":{"type":"description","text":"A virtual keyboard manager allows an application to provide keyboard\n\t\t\tinput events as if they came from a physical keyboard.\n\n\t\t\tIf the compositor enables a keyboard to perform arbitrary actions, it\n\t\t\tshould prevent untrusted clients from using this interface.","summary":"virtual keyboard manager"},"requests":[{"type":"request","name":"create_virtual_keyboard","description":{"type":"description","text":"Creates a new virtual keyboard associated to a seat.","summary":"create a new virtual keyboard"},"args":[{"type":"arg","name":"seat","argType":"object","interface":"wl_seat"},{"type":"arg","name":"id","argType":"new_id","summary":"the id of the newly created virtual keyboard","interface":"zwp_virtual_keyboard_v1"}]},{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"Destroys the virtual keyboard manager.\n\n\t\t\t\tExisting zwp_virtual_keyboard_v1 objects remain valid.","summary":"destroy the virtual keyboard manager object"},"args":[]}],"events":[],"enums":[]}]}