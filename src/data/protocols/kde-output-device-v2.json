{"type":"protocol","name":"kde_output_device_v2","copyright":{"type":"copyright","text":"\n    SPDX-FileCopyrightText: 2008-2011 Kristian Høgsberg\n    SPDX-FileCopyrightText: 2010-2011 Intel Corporation\n    SPDX-FileCopyrightText: 2012-2013 Collabora, Ltd.\n    SPDX-FileCopyrightText: 2015 Sebastian Kügler <sebas@kde.org>\n    SPDX-FileCopyrightText: 2021 Méven Car <meven.car@enioka.com>\n\n    SPDX-License-Identifier: MIT-CMU\n    "},"interfaces":[{"type":"interface","name":"kde_output_device_v2","version":"1","description":{"type":"description","text":"An output device describes a display device available to the compositor.\n      output_device is similar to wl_output, but focuses on output\n      configuration management.\n  \n      A client can query all global output_device objects to enlist all\n      available display devices, even those that may currently not be\n      represented by the compositor as a wl_output.\n  \n      The client sends configuration changes to the server through the\n      outputconfiguration interface, and the server applies the configuration\n      changes to the hardware and signals changes to the output devices\n      accordingly.\n  \n      This object is published as global during start up for every available\n      display devices, or when one later becomes available, for example by\n      being hotplugged via a physical connector.","summary":"output configuration representation"},"requests":[],"events":[{"type":"event","name":"geometry","description":{"type":"description","text":"The geometry event describes geometric properties of the output.\n        The event is sent when binding to the output object and whenever\n        any of the properties change.","summary":"geometric properties of the output"},"args":[{"type":"arg","name":"x","argType":"int","summary":"x position within the global compositor space"},{"type":"arg","name":"y","argType":"int","summary":"y position within the global compositor space"},{"type":"arg","name":"physical_width","argType":"int","summary":"width in millimeters of the output"},{"type":"arg","name":"physical_height","argType":"int","summary":"height in millimeters of the output"},{"type":"arg","name":"subpixel","argType":"int","summary":"subpixel orientation of the output"},{"type":"arg","name":"make","argType":"string","summary":"textual description of the manufacturer"},{"type":"arg","name":"model","argType":"string","summary":"textual description of the model"},{"type":"arg","name":"transform","argType":"int","summary":"transform that maps framebuffer to output"}]},{"type":"event","name":"current_mode","description":{"type":"description","text":"This event describes the mode currently in use for this head. It is only\n        sent if the output is enabled.","summary":"current mode"},"args":[{"type":"arg","name":"mode","argType":"object","interface":"kde_output_device_mode_v2"}]},{"type":"event","name":"mode","description":{"type":"description","text":"The mode event describes an available mode for the output.\n  \n        When the client binds to the output_device object, the server sends this\n        event once for every available mode the output_device can be operated by.\n  \n        There will always be at least one event sent out on initial binding,\n        which represents the current mode.\n  \n        Later if an output changes, its mode event is sent again for the\n        eventual added modes and lastly the current mode. In other words, the\n        current mode is always represented by the latest event sent with the current\n        flag set.\n  \n        The size of a mode is given in physical hardware units of the output device.\n        This is not necessarily the same as the output size in the global compositor\n        space. For instance, the output may be scaled, as described in\n        kde_output_device_v2.scale, or transformed, as described in\n        kde_output_device_v2.transform.","summary":"advertise available output modes and current one"},"args":[{"type":"arg","name":"mode","argType":"new_id","interface":"kde_output_device_mode_v2"}]},{"type":"event","name":"done","description":{"type":"description","text":"This event is sent after all other properties have been\n        sent on binding to the output object as well as after any\n        other output property change have been applied later on.\n        This allows to see changes to the output properties as atomic,\n        even if multiple events successively announce them.","summary":"sent all information about output"},"args":[]},{"type":"event","name":"scale","description":{"type":"description","text":"This event contains scaling geometry information\n        that is not in the geometry event. It may be sent after\n        binding the output object or if the output scale changes\n        later. If it is not sent, the client should assume a\n        scale of 1.\n  \n        A scale larger than 1 means that the compositor will\n        automatically scale surface buffers by this amount\n        when rendering. This is used for high resolution\n        displays where applications rendering at the native\n        resolution would be too small to be legible.\n  \n        It is intended that scaling aware clients track the\n        current output of a surface, and if it is on a scaled\n        output it should use wl_surface.set_buffer_scale with\n        the scale of the output. That way the compositor can\n        avoid scaling the surface, and the client can supply\n        a higher detail image.","summary":"output scaling properties"},"args":[{"type":"arg","name":"factor","argType":"fixed","summary":"scaling factor of output"}]},{"type":"event","name":"edid","description":{"type":"description","text":"The edid event encapsulates the EDID data for the outputdevice.\n  \n        The event is sent when binding to the output object. The EDID\n        data may be empty, in which case this event is sent anyway.\n        If the EDID information is empty, you can fall back to the name\n        et al. properties of the outputdevice.","summary":"advertise EDID data for the output"},"args":[{"type":"arg","name":"raw","argType":"string","summary":"base64-encoded EDID string"}]},{"type":"event","name":"enabled","description":{"type":"description","text":"The enabled event notifies whether this output is currently\n        enabled and used for displaying content by the server.\n        The event is sent when binding to the output object and\n        whenever later on an output changes its state by becoming\n        enabled or disabled.","summary":"output is enabled or disabled"},"args":[{"type":"arg","name":"enabled","argType":"int","summary":"output enabled state"}]},{"type":"event","name":"uuid","description":{"type":"description","text":"The uuid can be used to identify the output. It's controlled by\n        the server entirely. The server should make sure the uuid is\n        persistent across restarts. An empty uuid is considered invalid.","summary":"A unique id for this outputdevice"},"args":[{"type":"arg","name":"uuid","argType":"string","summary":"output devices ID"}]},{"type":"event","name":"serial_number","description":{"type":"description","text":"Serial ID of the monitor, sent on startup before the first done event.","summary":"Serial Number"},"args":[{"type":"arg","name":"serialNumber","argType":"string","summary":"textual representation of serial number"}]},{"type":"event","name":"eisa_id","description":{"type":"description","text":"EISA ID of the monitor, sent on startup before the first done event.","summary":"EISA ID"},"args":[{"type":"arg","name":"eisaId","argType":"string","summary":"textual representation of EISA identifier"}]},{"type":"event","name":"capabilities","description":{"type":"description","text":"What capabilities this device has, sent on startup before the first\n        done event.","summary":"capability flags"},"args":[{"type":"arg","name":"flags","argType":"uint","enum":"capability"}]},{"type":"event","name":"overscan","description":{"type":"description","text":"Overscan value of the monitor in percent, sent on startup before the\n        first done event.","summary":"overscan"},"args":[{"type":"arg","name":"overscan","argType":"uint","summary":"amount of overscan of the monitor"}]},{"type":"event","name":"vrr_policy","description":{"type":"description","text":"What policy the compositor will employ regarding its use of variable\n        refresh rate.","summary":"Variable Refresh Rate Policy"},"args":[{"type":"arg","name":"vrr_policy","argType":"uint","enum":"vrr_policy"}]},{"type":"event","name":"rgb_range","description":{"type":"description","text":"What rgb range the compositor is using for this output","summary":"RGB range"},"args":[{"type":"arg","name":"rgb_range","argType":"uint","enum":"rgb_range"}]}],"enums":[{"type":"enum","name":"subpixel","bitfield":false,"description":{"type":"description","text":"This enumeration describes how the physical pixels on an output are\n        laid out.","summary":"subpixel geometry information"},"entries":[{"type":"entry","name":"unknown","value":"0"},{"type":"entry","name":"none","value":"1"},{"type":"entry","name":"horizontal_rgb","value":"2"},{"type":"entry","name":"horizontal_bgr","value":"3"},{"type":"entry","name":"vertical_rgb","value":"4"},{"type":"entry","name":"vertical_bgr","value":"5"}]},{"type":"enum","name":"transform","bitfield":false,"description":{"type":"description","text":"This describes the transform, that a compositor will apply to a\n        surface to compensate for the rotation or mirroring of an\n        output device.\n  \n        The flipped values correspond to an initial flip around a\n        vertical axis followed by rotation.\n  \n        The purpose is mainly to allow clients to render accordingly and\n        tell the compositor, so that for fullscreen surfaces, the\n        compositor is still able to scan out directly client surfaces.","summary":"transform from framebuffer to output"},"entries":[{"type":"entry","name":"normal","value":"0"},{"type":"entry","name":"90","value":"1"},{"type":"entry","name":"180","value":"2"},{"type":"entry","name":"270","value":"3"},{"type":"entry","name":"flipped","value":"4"},{"type":"entry","name":"flipped_90","value":"5"},{"type":"entry","name":"flipped_180","value":"6"},{"type":"entry","name":"flipped_270","value":"7"}]},{"type":"enum","name":"capability","bitfield":true,"description":{"type":"description","text":"Describes what capabilities this device has.","summary":"describes capabilities of the outputdevice"},"entries":[{"type":"entry","name":"overscan","value":"1","summary":"if this output_device can use overscan"},{"type":"entry","name":"vrr","value":"2","summary":"if this outputdevice supports variable refresh rate"},{"type":"entry","name":"rgb_range","value":"4","summary":"if setting the rgb range is possible"}]},{"type":"enum","name":"vrr_policy","bitfield":false,"description":{"type":"description","text":"Describes when the compositor may employ variable refresh rate","summary":"describes vrr policy"},"entries":[{"type":"entry","name":"never","value":"0"},{"type":"entry","name":"always","value":"1"},{"type":"entry","name":"automatic","value":"2"}]},{"type":"enum","name":"rgb_range","bitfield":false,"description":{"type":"description","text":"Whether full or limited color range should be used","summary":"describes RGB range policy"},"entries":[{"type":"entry","name":"automatic","value":"0"},{"type":"entry","name":"full","value":"1"},{"type":"entry","name":"limited","value":"2"}]}]},{"type":"interface","name":"kde_output_device_mode_v2","version":"1","description":{"type":"description","text":"This object describes an output mode.\n\n      Some heads don't support output modes, in which case modes won't be\n      advertised.\n\n      Properties sent via this interface are applied atomically via the\n      kde_output_device.done event. No guarantees are made regarding the order\n      in which properties are sent.","summary":"output mode"},"requests":[],"events":[{"type":"event","name":"size","description":{"type":"description","text":"This event describes the mode size. The size is given in physical\n        hardware units of the output device. This is not necessarily the same as\n        the output size in the global compositor space. For instance, the output\n        may be scaled or transformed.","summary":"mode size"},"args":[{"type":"arg","name":"width","argType":"int","summary":"width of the mode in hardware units"},{"type":"arg","name":"height","argType":"int","summary":"height of the mode in hardware units"}]},{"type":"event","name":"refresh","description":{"type":"description","text":"This event describes the mode's fixed vertical refresh rate. It is only\n        sent if the mode has a fixed refresh rate.","summary":"mode refresh rate"},"args":[{"type":"arg","name":"refresh","argType":"int","summary":"vertical refresh rate in mHz"}]},{"type":"event","name":"preferred","description":{"type":"description","text":"This event advertises this mode as preferred.","summary":"mode is preferred"},"args":[]},{"type":"event","name":"removed","description":{"type":"description","text":"The compositor will destroy the object immediately after sending this\n        event, so it will become invalid and the client should release any\n        resources associated with it.","summary":"the mode has been destroyed"},"args":[]}],"enums":[]}]}