{"type":"protocol","name":"pointer_constraints_unstable_v1","copyright":{"type":"copyright","text":"Copyright © 2014      Jonas Ådahl\n    Copyright © 2015      Red Hat Inc.\n\n    Permission is hereby granted, free of charge, to any person obtaining a\n    copy of this software and associated documentation files (the \"Software\"),\n    to deal in the Software without restriction, including without limitation\n    the rights to use, copy, modify, merge, publish, distribute, sublicense,\n    and/or sell copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice (including the next\n    paragraph) shall be included in all copies or substantial portions of the\n    Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n    DEALINGS IN THE SOFTWARE."},"description":{"type":"description","text":"This protocol specifies a set of interfaces used for adding constraints to\n    the motion of a pointer. Possible constraints include confining pointer\n    motions to a given region, or locking it to its current position.\n\n    In order to constrain the pointer, a client must first bind the global\n    interface \"wp_pointer_constraints\" which, if a compositor supports pointer\n    constraints, is exposed by the registry. Using the bound global object, the\n    client uses the request that corresponds to the type of constraint it wants\n    to make. See wp_pointer_constraints for more details.\n\n    Warning! The protocol described in this file is experimental and backward\n    incompatible changes may be made. Backward compatible changes may be added\n    together with the corresponding interface version bump. Backward\n    incompatible changes are done by bumping the version number in the protocol\n    and interface names and resetting the interface version. Once the protocol\n    is to be declared stable, the 'z' prefix and the version number in the\n    protocol and interface names are removed and the interface version number is\n    reset.","summary":"protocol for constraining pointer motions"},"interfaces":[{"type":"interface","name":"zwp_pointer_constraints_v1","version":"1","description":{"type":"description","text":"The global interface exposing pointer constraining functionality. It\n      exposes two requests: lock_pointer for locking the pointer to its\n      position, and confine_pointer for locking the pointer to a region.\n\n      The lock_pointer and confine_pointer requests create the objects\n      wp_locked_pointer and wp_confined_pointer respectively, and the client can\n      use these objects to interact with the lock.\n\n      For any surface, only one lock or confinement may be active across all\n      wl_pointer objects of the same seat. If a lock or confinement is requested\n      when another lock or confinement is active or requested on the same surface\n      and with any of the wl_pointer objects of the same seat, an\n      'already_constrained' error will be raised.","summary":"constrain the movement of a pointer"},"requests":[{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"Used by the client to notify the server that it will no longer use this\n\tpointer constraints object.","summary":"destroy the pointer constraints manager object"},"args":[]},{"type":"request","name":"lock_pointer","description":{"type":"description","text":"The lock_pointer request lets the client request to disable movements of\n\tthe virtual pointer (i.e. the cursor), effectively locking the pointer\n\tto a position. This request may not take effect immediately; in the\n\tfuture, when the compositor deems implementation-specific constraints\n\tare satisfied, the pointer lock will be activated and the compositor\n\tsends a locked event.\n\n\tThe protocol provides no guarantee that the constraints are ever\n\tsatisfied, and does not require the compositor to send an error if the\n\tconstraints cannot ever be satisfied. It is thus possible to request a\n\tlock that will never activate.\n\n\tThere may not be another pointer constraint of any kind requested or\n\tactive on the surface for any of the wl_pointer objects of the seat of\n\tthe passed pointer when requesting a lock. If there is, an error will be\n\traised. See general pointer lock documentation for more details.\n\n\tThe intersection of the region passed with this request and the input\n\tregion of the surface is used to determine where the pointer must be\n\tin order for the lock to activate. It is up to the compositor whether to\n\twarp the pointer or require some kind of user interaction for the lock\n\tto activate. If the region is null the surface input region is used.\n\n\tA surface may receive pointer focus without the lock being activated.\n\n\tThe request creates a new object wp_locked_pointer which is used to\n\tinteract with the lock as well as receive updates about its state. See\n\tthe the description of wp_locked_pointer for further information.\n\n\tNote that while a pointer is locked, the wl_pointer objects of the\n\tcorresponding seat will not emit any wl_pointer.motion events, but\n\trelative motion events will still be emitted via wp_relative_pointer\n\tobjects of the same seat. wl_pointer.axis and wl_pointer.button events\n\tare unaffected.","summary":"lock pointer to a position"},"args":[{"type":"arg","name":"id","argType":"new_id","interface":"zwp_locked_pointer_v1"},{"type":"arg","name":"surface","argType":"object","summary":"surface to lock pointer to","interface":"wl_surface"},{"type":"arg","name":"pointer","argType":"object","summary":"the pointer that should be locked","interface":"wl_pointer"},{"type":"arg","name":"region","argType":"object","summary":"region of surface","interface":"wl_region","allowNull":"true"},{"type":"arg","name":"lifetime","argType":"uint","summary":"lock lifetime","enum":"lifetime"}]},{"type":"request","name":"confine_pointer","description":{"type":"description","text":"The confine_pointer request lets the client request to confine the\n\tpointer cursor to a given region. This request may not take effect\n\timmediately; in the future, when the compositor deems implementation-\n\tspecific constraints are satisfied, the pointer confinement will be\n\tactivated and the compositor sends a confined event.\n\n\tThe intersection of the region passed with this request and the input\n\tregion of the surface is used to determine where the pointer must be\n\tin order for the confinement to activate. It is up to the compositor\n\twhether to warp the pointer or require some kind of user interaction for\n\tthe confinement to activate. If the region is null the surface input\n\tregion is used.\n\n\tThe request will create a new object wp_confined_pointer which is used\n\tto interact with the confinement as well as receive updates about its\n\tstate. See the the description of wp_confined_pointer for further\n\tinformation.","summary":"confine pointer to a region"},"args":[{"type":"arg","name":"id","argType":"new_id","interface":"zwp_confined_pointer_v1"},{"type":"arg","name":"surface","argType":"object","summary":"surface to lock pointer to","interface":"wl_surface"},{"type":"arg","name":"pointer","argType":"object","summary":"the pointer that should be confined","interface":"wl_pointer"},{"type":"arg","name":"region","argType":"object","summary":"region of surface","interface":"wl_region","allowNull":"true"},{"type":"arg","name":"lifetime","argType":"uint","summary":"confinement lifetime","enum":"lifetime"}]}],"events":[],"enums":[{"type":"enum","name":"error","bitfield":false,"description":{"type":"description","text":"These errors can be emitted in response to wp_pointer_constraints\n\trequests.","summary":"wp_pointer_constraints error values"},"entries":[{"type":"entry","name":"already_constrained","value":"1","summary":"pointer constraint already requested on that surface"}]},{"type":"enum","name":"lifetime","bitfield":false,"description":{"type":"description","text":"These values represent different lifetime semantics. They are passed\n\tas arguments to the factory requests to specify how the constraint\n\tlifetimes should be managed.","summary":"constraint lifetime"},"entries":[{"type":"entry","name":"oneshot","value":"1","description":{"type":"description","text":"A oneshot pointer constraint will never reactivate once it has been\n\t  deactivated. See the corresponding deactivation event\n\t  (wp_locked_pointer.unlocked and wp_confined_pointer.unconfined) for\n\t  details.","summary":"the pointer constraint is defunct once deactivated"}},{"type":"entry","name":"persistent","value":"2","description":{"type":"description","text":"A persistent pointer constraint may again reactivate once it has\n\t  been deactivated. See the corresponding deactivation event\n\t  (wp_locked_pointer.unlocked and wp_confined_pointer.unconfined) for\n\t  details.","summary":"the pointer constraint may reactivate"}}]}]},{"type":"interface","name":"zwp_locked_pointer_v1","version":"1","description":{"type":"description","text":"The wp_locked_pointer interface represents a locked pointer state.\n\n      While the lock of this object is active, the wl_pointer objects of the\n      associated seat will not emit any wl_pointer.motion events.\n\n      This object will send the event 'locked' when the lock is activated.\n      Whenever the lock is activated, it is guaranteed that the locked surface\n      will already have received pointer focus and that the pointer will be\n      within the region passed to the request creating this object.\n\n      To unlock the pointer, send the destroy request. This will also destroy\n      the wp_locked_pointer object.\n\n      If the compositor decides to unlock the pointer the unlocked event is\n      sent. See wp_locked_pointer.unlock for details.\n\n      When unlocking, the compositor may warp the cursor position to the set\n      cursor position hint. If it does, it will not result in any relative\n      motion events emitted via wp_relative_pointer.\n\n      If the surface the lock was requested on is destroyed and the lock is not\n      yet activated, the wp_locked_pointer object is now defunct and must be\n      destroyed.","summary":"receive relative pointer motion events"},"requests":[{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"Destroy the locked pointer object. If applicable, the compositor will\n\tunlock the pointer.","summary":"destroy the locked pointer object"},"args":[]},{"type":"request","name":"set_cursor_position_hint","description":{"type":"description","text":"Set the cursor position hint relative to the top left corner of the\n\tsurface.\n\n\tIf the client is drawing its own cursor, it should update the position\n\thint to the position of its own cursor. A compositor may use this\n\tinformation to warp the pointer upon unlock in order to avoid pointer\n\tjumps.\n\n\tThe cursor position hint is double buffered. The new hint will only take\n\teffect when the associated surface gets it pending state applied. See\n\twl_surface.commit for details.","summary":"set the pointer cursor position hint"},"args":[{"type":"arg","name":"surface_x","argType":"fixed","summary":"surface-local x coordinate"},{"type":"arg","name":"surface_y","argType":"fixed","summary":"surface-local y coordinate"}]},{"type":"request","name":"set_region","description":{"type":"description","text":"Set a new region used to lock the pointer.\n\n\tThe new lock region is double-buffered. The new lock region will\n\tonly take effect when the associated surface gets its pending state\n\tapplied. See wl_surface.commit for details.\n\n\tFor details about the lock region, see wp_locked_pointer.","summary":"set a new lock region"},"args":[{"type":"arg","name":"region","argType":"object","summary":"region of surface","interface":"wl_region","allowNull":"true"}]}],"events":[{"type":"event","name":"locked","description":{"type":"description","text":"Notification that the pointer lock of the seat's pointer is activated.","summary":"lock activation event"},"args":[]},{"type":"event","name":"unlocked","description":{"type":"description","text":"Notification that the pointer lock of the seat's pointer is no longer\n\tactive. If this is a oneshot pointer lock (see\n\twp_pointer_constraints.lifetime) this object is now defunct and should\n\tbe destroyed. If this is a persistent pointer lock (see\n\twp_pointer_constraints.lifetime) this pointer lock may again\n\treactivate in the future.","summary":"lock deactivation event"},"args":[]}],"enums":[]},{"type":"interface","name":"zwp_confined_pointer_v1","version":"1","description":{"type":"description","text":"The wp_confined_pointer interface represents a confined pointer state.\n\n      This object will send the event 'confined' when the confinement is\n      activated. Whenever the confinement is activated, it is guaranteed that\n      the surface the pointer is confined to will already have received pointer\n      focus and that the pointer will be within the region passed to the request\n      creating this object. It is up to the compositor to decide whether this\n      requires some user interaction and if the pointer will warp to within the\n      passed region if outside.\n\n      To unconfine the pointer, send the destroy request. This will also destroy\n      the wp_confined_pointer object.\n\n      If the compositor decides to unconfine the pointer the unconfined event is\n      sent. The wp_confined_pointer object is at this point defunct and should\n      be destroyed.","summary":"confined pointer object"},"requests":[{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"Destroy the confined pointer object. If applicable, the compositor will\n\tunconfine the pointer.","summary":"destroy the confined pointer object"},"args":[]},{"type":"request","name":"set_region","description":{"type":"description","text":"Set a new region used to confine the pointer.\n\n\tThe new confine region is double-buffered. The new confine region will\n\tonly take effect when the associated surface gets its pending state\n\tapplied. See wl_surface.commit for details.\n\n\tIf the confinement is active when the new confinement region is applied\n\tand the pointer ends up outside of newly applied region, the pointer may\n\twarped to a position within the new confinement region. If warped, a\n\twl_pointer.motion event will be emitted, but no\n\twp_relative_pointer.relative_motion event.\n\n\tThe compositor may also, instead of using the new region, unconfine the\n\tpointer.\n\n\tFor details about the confine region, see wp_confined_pointer.","summary":"set a new confine region"},"args":[{"type":"arg","name":"region","argType":"object","summary":"region of surface","interface":"wl_region","allowNull":"true"}]}],"events":[{"type":"event","name":"confined","description":{"type":"description","text":"Notification that the pointer confinement of the seat's pointer is\n\tactivated.","summary":"pointer confined"},"args":[]},{"type":"event","name":"unconfined","description":{"type":"description","text":"Notification that the pointer confinement of the seat's pointer is no\n\tlonger active. If this is a oneshot pointer confinement (see\n\twp_pointer_constraints.lifetime) this object is now defunct and should\n\tbe destroyed. If this is a persistent pointer confinement (see\n\twp_pointer_constraints.lifetime) this pointer confinement may again\n\treactivate in the future.","summary":"pointer unconfined"},"args":[]}],"enums":[]}]}